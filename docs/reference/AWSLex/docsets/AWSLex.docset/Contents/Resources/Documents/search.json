{"Protocols/AWSLexVoiceButtonDelegate.html#/c:objc(pl)AWSLexVoiceButtonDelegate(im)voiceButton:onError:":{"name":"-voiceButton:onError:","abstract":"<p>Undocumented</p>","parent_name":"AWSLexVoiceButtonDelegate"},"Protocols/AWSLexVoiceButtonDelegate.html#/c:objc(pl)AWSLexVoiceButtonDelegate(im)voiceButton:onResponse:":{"name":"-voiceButton:onResponse:","abstract":"<p>Undocumented</p>","parent_name":"AWSLexVoiceButtonDelegate"},"Protocols/AWSLexVoiceButtonDelegate.html#/c:objc(pl)AWSLexVoiceButtonDelegate(im)voiceButtononReadyToFullFill:withSlots:":{"name":"-voiceButtononReadyToFullFill:withSlots:","abstract":"<p>Undocumented</p>","parent_name":"AWSLexVoiceButtonDelegate"},"Protocols/AWSLexAudioPlayerDelegate.html#/c:objc(pl)AWSLexAudioPlayerDelegate(im)interactionKitOnAudioPlaybackStarted:":{"name":"-interactionKitOnAudioPlaybackStarted:","abstract":"<p>Undocumented</p>","parent_name":"AWSLexAudioPlayerDelegate"},"Protocols/AWSLexAudioPlayerDelegate.html#/c:objc(pl)AWSLexAudioPlayerDelegate(im)interactionKitOnAudioPlaybackFinished:":{"name":"-interactionKitOnAudioPlaybackFinished:","abstract":"<p>Undocumented</p>","parent_name":"AWSLexAudioPlayerDelegate"},"Protocols/AWSLexInteractionDelegate.html#/c:objc(pl)AWSLexInteractionDelegate(im)interactionKit:onError:":{"name":"-interactionKit:onError:","abstract":"<p>Undocumented</p>","parent_name":"AWSLexInteractionDelegate"},"Protocols/AWSLexInteractionDelegate.html#/c:objc(pl)AWSLexInteractionDelegate(im)interactionKit:onDialogReadyForFulfillmentForIntent:slots:":{"name":"-interactionKit:onDialogReadyForFulfillmentForIntent:slots:","abstract":"<p>Undocumented</p>","parent_name":"AWSLexInteractionDelegate"},"Protocols/AWSLexInteractionDelegate.html#/c:objc(pl)AWSLexInteractionDelegate(im)interactionKit:switchModeInput:completionSource:":{"name":"-interactionKit:switchModeInput:completionSource:","abstract":"<p>Undocumented</p>","parent_name":"AWSLexInteractionDelegate"},"Protocols/AWSLexInteractionDelegate.html#/c:objc(pl)AWSLexInteractionDelegate(im)interactionKitContinueWithText:completionSource:":{"name":"-interactionKitContinueWithText:completionSource:","abstract":"<p>Undocumented</p>","parent_name":"AWSLexInteractionDelegate"},"Protocols/AWSLexMicrophoneDelegate.html#/c:objc(pl)AWSLexMicrophoneDelegate(im)interactionKitOnRecordingStart:":{"name":"-interactionKitOnRecordingStart:","abstract":"<p>Undocumented</p>","parent_name":"AWSLexMicrophoneDelegate"},"Protocols/AWSLexMicrophoneDelegate.html#/c:objc(pl)AWSLexMicrophoneDelegate(im)interactionKitOnRecordingEnd:audioStream:contentType:":{"name":"-interactionKitOnRecordingEnd:audioStream:contentType:","abstract":"<p>Undocumented</p>","parent_name":"AWSLexMicrophoneDelegate"},"Protocols/AWSLexMicrophoneDelegate.html#/c:objc(pl)AWSLexMicrophoneDelegate(im)interactionKitReadyForRecording:":{"name":"-interactionKitReadyForRecording:","abstract":"<p>Undocumented</p>","parent_name":"AWSLexMicrophoneDelegate"},"Protocols/AWSLexMicrophoneDelegate.html#/c:objc(pl)AWSLexMicrophoneDelegate(im)interactionKit:onSoundLevelChanged:":{"name":"-interactionKit:onSoundLevelChanged:","abstract":"<p>Undocumented</p>","parent_name":"AWSLexMicrophoneDelegate"},"Protocols/AWSLexMicrophoneDelegate.html":{"name":"AWSLexMicrophoneDelegate","abstract":"<p>Undocumented</p>"},"Protocols/AWSLexInteractionDelegate.html":{"name":"AWSLexInteractionDelegate","abstract":"<p>Undocumented</p>"},"Protocols/AWSLexAudioPlayerDelegate.html":{"name":"AWSLexAudioPlayerDelegate","abstract":"<p>Undocumented</p>"},"Protocols/AWSLexVoiceButtonDelegate.html":{"name":"AWSLexVoiceButtonDelegate","abstract":"<p>Undocumented</p>"},"Enums/AWSLexVoiceButtonErrorCode.html#/c:@E@AWSLexVoiceButtonErrorCode@AWSLexVoiceButtonErrorCodeUnknown":{"name":"AWSLexVoiceButtonErrorCodeUnknown","abstract":"<p>Undocumented</p>","parent_name":"AWSLexVoiceButtonErrorCode"},"Enums/AWSLexVoiceButtonErrorCode.html#/c:@E@AWSLexVoiceButtonErrorCode@AWSLexVoiceButtonErrorCodeAudioRecordingPermisionDenied":{"name":"AWSLexVoiceButtonErrorCodeAudioRecordingPermisionDenied","abstract":"<p>Undocumented</p>","parent_name":"AWSLexVoiceButtonErrorCode"},"Enums/AWSLexMessageFormatType.html#/c:@E@AWSLexMessageFormatType@AWSLexMessageFormatTypeUnknown":{"name":"AWSLexMessageFormatTypeUnknown","abstract":"<p>Undocumented</p>","parent_name":"AWSLexMessageFormatType"},"Enums/AWSLexMessageFormatType.html#/c:@E@AWSLexMessageFormatType@AWSLexMessageFormatTypePlainText":{"name":"AWSLexMessageFormatTypePlainText","abstract":"<p>Undocumented</p>","parent_name":"AWSLexMessageFormatType"},"Enums/AWSLexMessageFormatType.html#/c:@E@AWSLexMessageFormatType@AWSLexMessageFormatTypeCustomPayload":{"name":"AWSLexMessageFormatTypeCustomPayload","abstract":"<p>Undocumented</p>","parent_name":"AWSLexMessageFormatType"},"Enums/AWSLexMessageFormatType.html#/c:@E@AWSLexMessageFormatType@AWSLexMessageFormatTypeSsml":{"name":"AWSLexMessageFormatTypeSsml","abstract":"<p>Undocumented</p>","parent_name":"AWSLexMessageFormatType"},"Enums/AWSLexMessageFormatType.html#/c:@E@AWSLexMessageFormatType@AWSLexMessageFormatTypeComposite":{"name":"AWSLexMessageFormatTypeComposite","abstract":"<p>Undocumented</p>","parent_name":"AWSLexMessageFormatType"},"Enums/AWSLexFulfillmentState.html#/c:@E@AWSLexFulfillmentState@AWSLexFulfillmentStateUnknown":{"name":"AWSLexFulfillmentStateUnknown","abstract":"<p>Undocumented</p>","parent_name":"AWSLexFulfillmentState"},"Enums/AWSLexFulfillmentState.html#/c:@E@AWSLexFulfillmentState@AWSLexFulfillmentStateFulfilled":{"name":"AWSLexFulfillmentStateFulfilled","abstract":"<p>Undocumented</p>","parent_name":"AWSLexFulfillmentState"},"Enums/AWSLexFulfillmentState.html#/c:@E@AWSLexFulfillmentState@AWSLexFulfillmentStateFailed":{"name":"AWSLexFulfillmentStateFailed","abstract":"<p>Undocumented</p>","parent_name":"AWSLexFulfillmentState"},"Enums/AWSLexFulfillmentState.html#/c:@E@AWSLexFulfillmentState@AWSLexFulfillmentStateReadyForFulfillment":{"name":"AWSLexFulfillmentStateReadyForFulfillment","abstract":"<p>Undocumented</p>","parent_name":"AWSLexFulfillmentState"},"Enums/AWSLexDialogState.html#/c:@E@AWSLexDialogState@AWSLexDialogStateUnknown":{"name":"AWSLexDialogStateUnknown","abstract":"<p>Undocumented</p>","parent_name":"AWSLexDialogState"},"Enums/AWSLexDialogState.html#/c:@E@AWSLexDialogState@AWSLexDialogStateElicitIntent":{"name":"AWSLexDialogStateElicitIntent","abstract":"<p>Undocumented</p>","parent_name":"AWSLexDialogState"},"Enums/AWSLexDialogState.html#/c:@E@AWSLexDialogState@AWSLexDialogStateConfirmIntent":{"name":"AWSLexDialogStateConfirmIntent","abstract":"<p>Undocumented</p>","parent_name":"AWSLexDialogState"},"Enums/AWSLexDialogState.html#/c:@E@AWSLexDialogState@AWSLexDialogStateElicitSlot":{"name":"AWSLexDialogStateElicitSlot","abstract":"<p>Undocumented</p>","parent_name":"AWSLexDialogState"},"Enums/AWSLexDialogState.html#/c:@E@AWSLexDialogState@AWSLexDialogStateFulfilled":{"name":"AWSLexDialogStateFulfilled","abstract":"<p>Undocumented</p>","parent_name":"AWSLexDialogState"},"Enums/AWSLexDialogState.html#/c:@E@AWSLexDialogState@AWSLexDialogStateReadyForFulfillment":{"name":"AWSLexDialogStateReadyForFulfillment","abstract":"<p>Undocumented</p>","parent_name":"AWSLexDialogState"},"Enums/AWSLexDialogState.html#/c:@E@AWSLexDialogState@AWSLexDialogStateFailed":{"name":"AWSLexDialogStateFailed","abstract":"<p>Undocumented</p>","parent_name":"AWSLexDialogState"},"Enums/AWSLexDialogActionType.html#/c:@E@AWSLexDialogActionType@AWSLexDialogActionTypeUnknown":{"name":"AWSLexDialogActionTypeUnknown","abstract":"<p>Undocumented</p>","parent_name":"AWSLexDialogActionType"},"Enums/AWSLexDialogActionType.html#/c:@E@AWSLexDialogActionType@AWSLexDialogActionTypeElicitIntent":{"name":"AWSLexDialogActionTypeElicitIntent","abstract":"<p>Undocumented</p>","parent_name":"AWSLexDialogActionType"},"Enums/AWSLexDialogActionType.html#/c:@E@AWSLexDialogActionType@AWSLexDialogActionTypeConfirmIntent":{"name":"AWSLexDialogActionTypeConfirmIntent","abstract":"<p>Undocumented</p>","parent_name":"AWSLexDialogActionType"},"Enums/AWSLexDialogActionType.html#/c:@E@AWSLexDialogActionType@AWSLexDialogActionTypeElicitSlot":{"name":"AWSLexDialogActionTypeElicitSlot","abstract":"<p>Undocumented</p>","parent_name":"AWSLexDialogActionType"},"Enums/AWSLexDialogActionType.html#/c:@E@AWSLexDialogActionType@AWSLexDialogActionTypeClose":{"name":"AWSLexDialogActionTypeClose","abstract":"<p>Undocumented</p>","parent_name":"AWSLexDialogActionType"},"Enums/AWSLexDialogActionType.html#/c:@E@AWSLexDialogActionType@AWSLexDialogActionTypeDelegate":{"name":"AWSLexDialogActionTypeDelegate","abstract":"<p>Undocumented</p>","parent_name":"AWSLexDialogActionType"},"Enums/AWSLexContentType.html#/c:@E@AWSLexContentType@AWSLexContentTypeUnknown":{"name":"AWSLexContentTypeUnknown","abstract":"<p>Undocumented</p>","parent_name":"AWSLexContentType"},"Enums/AWSLexContentType.html#/c:@E@AWSLexContentType@AWSLexContentTypeApplicationVndAmazonawsCardGeneric":{"name":"AWSLexContentTypeApplicationVndAmazonawsCardGeneric","abstract":"<p>Undocumented</p>","parent_name":"AWSLexContentType"},"Enums/AWSLexConfirmationStatus.html#/c:@E@AWSLexConfirmationStatus@AWSLexConfirmationStatusUnknown":{"name":"AWSLexConfirmationStatusUnknown","abstract":"<p>Undocumented</p>","parent_name":"AWSLexConfirmationStatus"},"Enums/AWSLexConfirmationStatus.html#/c:@E@AWSLexConfirmationStatus@AWSLexConfirmationStatusNone":{"name":"AWSLexConfirmationStatusNone","abstract":"<p>Undocumented</p>","parent_name":"AWSLexConfirmationStatus"},"Enums/AWSLexConfirmationStatus.html#/c:@E@AWSLexConfirmationStatus@AWSLexConfirmationStatusConfirmed":{"name":"AWSLexConfirmationStatusConfirmed","abstract":"<p>Undocumented</p>","parent_name":"AWSLexConfirmationStatus"},"Enums/AWSLexConfirmationStatus.html#/c:@E@AWSLexConfirmationStatus@AWSLexConfirmationStatusDenied":{"name":"AWSLexConfirmationStatusDenied","abstract":"<p>Undocumented</p>","parent_name":"AWSLexConfirmationStatus"},"Enums/AWSLexErrorType.html#/c:@E@AWSLexErrorType@AWSLexErrorUnknown":{"name":"AWSLexErrorUnknown","abstract":"<p>Undocumented</p>","parent_name":"AWSLexErrorType"},"Enums/AWSLexErrorType.html#/c:@E@AWSLexErrorType@AWSLexErrorBadGateway":{"name":"AWSLexErrorBadGateway","abstract":"<p>Undocumented</p>","parent_name":"AWSLexErrorType"},"Enums/AWSLexErrorType.html#/c:@E@AWSLexErrorType@AWSLexErrorBadRequest":{"name":"AWSLexErrorBadRequest","abstract":"<p>Undocumented</p>","parent_name":"AWSLexErrorType"},"Enums/AWSLexErrorType.html#/c:@E@AWSLexErrorType@AWSLexErrorConflict":{"name":"AWSLexErrorConflict","abstract":"<p>Undocumented</p>","parent_name":"AWSLexErrorType"},"Enums/AWSLexErrorType.html#/c:@E@AWSLexErrorType@AWSLexErrorDependencyFailed":{"name":"AWSLexErrorDependencyFailed","abstract":"<p>Undocumented</p>","parent_name":"AWSLexErrorType"},"Enums/AWSLexErrorType.html#/c:@E@AWSLexErrorType@AWSLexErrorInternalFailure":{"name":"AWSLexErrorInternalFailure","abstract":"<p>Undocumented</p>","parent_name":"AWSLexErrorType"},"Enums/AWSLexErrorType.html#/c:@E@AWSLexErrorType@AWSLexErrorLimitExceeded":{"name":"AWSLexErrorLimitExceeded","abstract":"<p>Undocumented</p>","parent_name":"AWSLexErrorType"},"Enums/AWSLexErrorType.html#/c:@E@AWSLexErrorType@AWSLexErrorLoopDetected":{"name":"AWSLexErrorLoopDetected","abstract":"<p>Undocumented</p>","parent_name":"AWSLexErrorType"},"Enums/AWSLexErrorType.html#/c:@E@AWSLexErrorType@AWSLexErrorNotAcceptable":{"name":"AWSLexErrorNotAcceptable","abstract":"<p>Undocumented</p>","parent_name":"AWSLexErrorType"},"Enums/AWSLexErrorType.html#/c:@E@AWSLexErrorType@AWSLexErrorNotFound":{"name":"AWSLexErrorNotFound","abstract":"<p>Undocumented</p>","parent_name":"AWSLexErrorType"},"Enums/AWSLexErrorType.html#/c:@E@AWSLexErrorType@AWSLexErrorRequestTimeout":{"name":"AWSLexErrorRequestTimeout","abstract":"<p>Undocumented</p>","parent_name":"AWSLexErrorType"},"Enums/AWSLexErrorType.html#/c:@E@AWSLexErrorType@AWSLexErrorUnsupportedMediaType":{"name":"AWSLexErrorUnsupportedMediaType","abstract":"<p>Undocumented</p>","parent_name":"AWSLexErrorType"},"Enums/AWSLexSpeechEncoding.html#/c:@E@AWSLexSpeechEncoding@AWSLexSpeechEncodingOpus":{"name":"AWSLexSpeechEncodingOpus","abstract":"<p>Undocumented</p>","parent_name":"AWSLexSpeechEncoding"},"Enums/AWSLexSpeechEncoding.html#/c:@E@AWSLexSpeechEncoding@AWSLexSpeechEncodingLPCM":{"name":"AWSLexSpeechEncodingLPCM","abstract":"<p>Undocumented</p>","parent_name":"AWSLexSpeechEncoding"},"Enums/AWSLexInteractionMode.html#/c:@E@AWSLexInteractionMode@AWSLexInteractionModeBreak":{"name":"AWSLexInteractionModeBreak","abstract":"<p>Undocumented</p>","parent_name":"AWSLexInteractionMode"},"Enums/AWSLexInteractionMode.html#/c:@E@AWSLexInteractionMode@AWSLexInteractionModeText":{"name":"AWSLexInteractionModeText","abstract":"<p>Undocumented</p>","parent_name":"AWSLexInteractionMode"},"Enums/AWSLexInteractionMode.html#/c:@E@AWSLexInteractionMode@AWSLexInteractionModeTextToSpeech":{"name":"AWSLexInteractionModeTextToSpeech","abstract":"<p>Undocumented</p>","parent_name":"AWSLexInteractionMode"},"Enums/AWSLexInteractionMode.html#/c:@E@AWSLexInteractionMode@AWSLexInteractionModeSpeech":{"name":"AWSLexInteractionModeSpeech","abstract":"<p>Undocumented</p>","parent_name":"AWSLexInteractionMode"},"Enums/AWSLexInteractionMode.html#/c:@E@AWSLexInteractionMode@AWSLexInteractionModeSpeechToText":{"name":"AWSLexInteractionModeSpeechToText","abstract":"<p>Undocumented</p>","parent_name":"AWSLexInteractionMode"},"Enums/AWSLexInteractionKitErrorCode.html#/c:@E@AWSLexInteractionKitErrorCode@AWSLexInteractionKitErrorCodeUnknown":{"name":"AWSLexInteractionKitErrorCodeUnknown","abstract":"<p>Undocumented</p>","parent_name":"AWSLexInteractionKitErrorCode"},"Enums/AWSLexInteractionKitErrorCode.html#/c:@E@AWSLexInteractionKitErrorCode@AWSLexInteractionKitErrorCodeAudioRecording":{"name":"AWSLexInteractionKitErrorCodeAudioRecording","abstract":"<p>Undocumented</p>","parent_name":"AWSLexInteractionKitErrorCode"},"Enums/AWSLexInteractionKitErrorCode.html#/c:@E@AWSLexInteractionKitErrorCode@AWSLexInteractionKitErrorCodeAudioStreaming":{"name":"AWSLexInteractionKitErrorCodeAudioStreaming","abstract":"<p>Undocumented</p>","parent_name":"AWSLexInteractionKitErrorCode"},"Enums/AWSLexInteractionKitErrorCode.html#/c:@E@AWSLexInteractionKitErrorCode@AWSLexInteractionKitErrorCodeMaxSpeechTimeout":{"name":"AWSLexInteractionKitErrorCodeMaxSpeechTimeout","abstract":"<p>Undocumented</p>","parent_name":"AWSLexInteractionKitErrorCode"},"Enums/AWSLexInteractionKitErrorCode.html#/c:@E@AWSLexInteractionKitErrorCode@AWSLexInteractionKitErrorCodeNoSpeechTimeout":{"name":"AWSLexInteractionKitErrorCodeNoSpeechTimeout","abstract":"<p>Undocumented</p>","parent_name":"AWSLexInteractionKitErrorCode"},"Enums/AWSLexInteractionKitErrorCode.html#/c:@E@AWSLexInteractionKitErrorCode@AWSLexInteractionKitErrorCodeDialogFailed":{"name":"AWSLexInteractionKitErrorCodeDialogFailed","abstract":"<p>Undocumented</p>","parent_name":"AWSLexInteractionKitErrorCode"},"Enums/AWSLexInteractionKitErrorCode.html#/c:@E@AWSLexInteractionKitErrorCode@AWSLexInteractionKitErrorCodeRequestInProgress":{"name":"AWSLexInteractionKitErrorCodeRequestInProgress","abstract":"<p>Undocumented</p>","parent_name":"AWSLexInteractionKitErrorCode"},"Enums/AWSLexInteractionKitErrorCode.html":{"name":"AWSLexInteractionKitErrorCode","abstract":"<p>Undocumented</p>"},"Enums/AWSLexInteractionMode.html":{"name":"AWSLexInteractionMode","abstract":"<p>Undocumented</p>"},"Enums/AWSLexSpeechEncoding.html":{"name":"AWSLexSpeechEncoding","abstract":"<p>Undocumented</p>"},"Enums/AWSLexErrorType.html":{"name":"AWSLexErrorType","abstract":"<p>Undocumented</p>"},"Enums/AWSLexConfirmationStatus.html":{"name":"AWSLexConfirmationStatus","abstract":"<p>Undocumented</p>"},"Enums/AWSLexContentType.html":{"name":"AWSLexContentType","abstract":"<p>Undocumented</p>"},"Enums/AWSLexDialogActionType.html":{"name":"AWSLexDialogActionType","abstract":"<p>Undocumented</p>"},"Enums/AWSLexDialogState.html":{"name":"AWSLexDialogState","abstract":"<p>Undocumented</p>"},"Enums/AWSLexFulfillmentState.html":{"name":"AWSLexFulfillmentState","abstract":"<p>Undocumented</p>"},"Enums/AWSLexMessageFormatType.html":{"name":"AWSLexMessageFormatType","abstract":"<p>Undocumented</p>"},"Enums/AWSLexVoiceButtonErrorCode.html":{"name":"AWSLexVoiceButtonErrorCode","abstract":"<p>Undocumented</p>"},"Constants.html#/c:@AWSLexVersionNumber":{"name":"AWSLexVersionNumber","abstract":"<p>Undocumented</p>"},"Constants.html#/c:@AWSLexVersionString":{"name":"AWSLexVersionString","abstract":"<p>Undocumented</p>"},"Constants.html#/c:@AWSLexContentTypeText":{"name":"AWSLexContentTypeText","abstract":"<p>Undocumented</p>"},"Constants.html#/c:@AWSLexAcceptMPEG":{"name":"AWSLexAcceptMPEG","abstract":"<p>Undocumented</p>"},"Constants.html#/c:@AWSLexAcceptVorbid":{"name":"AWSLexAcceptVorbid","abstract":"<p>Undocumented</p>"},"Constants.html#/c:@AWSLexAcceptPCM":{"name":"AWSLexAcceptPCM","abstract":"<p>Undocumented</p>"},"Constants.html#/c:@AWSLexAcceptText":{"name":"AWSLexAcceptText","abstract":"<p>Undocumented</p>"},"Constants.html#/c:@AWSInteractionKitSDKVersion":{"name":"AWSInteractionKitSDKVersion","abstract":"<p>Undocumented</p>"},"Constants.html#/c:@AWSInternalLexInteractionKit":{"name":"AWSInternalLexInteractionKit","abstract":"<p>Undocumented</p>"},"Constants.html#/c:@AWSLexInteractionKitErrorDomain":{"name":"AWSLexInteractionKitErrorDomain","abstract":"<p>Undocumented</p>"},"Constants.html#/c:@AWSLexErrorDomain":{"name":"AWSLexErrorDomain","abstract":"<p>Undocumented</p>"},"Constants.html#/c:@AWSLexSDKVersion":{"name":"AWSLexSDKVersion","abstract":"<p>Undocumented</p>"},"Constants.html#/c:@AWSLexVoiceButtonErrorDomain":{"name":"AWSLexVoiceButtonErrorDomain","abstract":"<p>Undocumented</p>"},"Constants.html#/c:@AWSLexVoiceButtonKey":{"name":"AWSLexVoiceButtonKey","abstract":"<p>Undocumented</p>"},"Classes/AWSLexVoiceButton.html#/c:objc(cs)AWSLexVoiceButton(py)delegate":{"name":"delegate","abstract":"<p>Undocumented</p>","parent_name":"AWSLexVoiceButton"},"Classes/AWSLexVoiceButton.html#/c:objc(cs)AWSLexVoiceButton(py)animateOnImageSwitching":{"name":"animateOnImageSwitching","abstract":"<p>Enable push transition animation when image switch between microphone and listen image. Default is NO.</p>","parent_name":"AWSLexVoiceButton"},"Classes/AWSLexVoiceButton.html#/c:objc(cs)AWSLexVoiceButton(py)microphoneImageColor":{"name":"microphoneImageColor","abstract":"<p>Set color for microphone image. Default is nil.</p>","parent_name":"AWSLexVoiceButton"},"Classes/AWSLexVoiceButton.html#/c:objc(cs)AWSLexVoiceButton(py)lexImageColor":{"name":"lexImageColor","abstract":"<p>Set color for inactive microphone image. Default is light grey.</p>","parent_name":"AWSLexVoiceButton"},"Classes/AWSLexVoiceButton.html#/c:objc(cs)AWSLexVoiceButton(py)errorColor":{"name":"errorColor","abstract":"<p>Undocumented</p>","parent_name":"AWSLexVoiceButton"},"Classes/AWSLexVoiceButtonResponse.html#/c:objc(cs)AWSLexVoiceButtonResponse(py)intent":{"name":"intent","abstract":"<p>Name of the intent being ellicited.</p>","parent_name":"AWSLexVoiceButtonResponse"},"Classes/AWSLexVoiceButtonResponse.html#/c:objc(cs)AWSLexVoiceButtonResponse(py)outputText":{"name":"outputText","abstract":"<p>Text response.</p>","parent_name":"AWSLexVoiceButtonResponse"},"Classes/AWSLexVoiceButtonResponse.html#/c:objc(cs)AWSLexVoiceButtonResponse(py)slots":{"name":"slots","abstract":"<p>The slots which are currently filled in an ongoing dialog</p>","parent_name":"AWSLexVoiceButtonResponse"},"Classes/AWSLexVoiceButtonResponse.html#/c:objc(cs)AWSLexVoiceButtonResponse(py)elicitSlot":{"name":"elicitSlot","abstract":"<p>The slot which is being ellicited for an intent.</p>","parent_name":"AWSLexVoiceButtonResponse"},"Classes/AWSLexVoiceButtonResponse.html#/c:objc(cs)AWSLexVoiceButtonResponse(py)dialogState":{"name":"dialogState","abstract":"<p>The current dialog state.</p>","parent_name":"AWSLexVoiceButtonResponse"},"Classes/AWSLexVoiceButtonResponse.html#/c:objc(cs)AWSLexVoiceButtonResponse(py)sessionAttributes":{"name":"sessionAttributes","abstract":"<p>The session attributes returned from the service.</p>","parent_name":"AWSLexVoiceButtonResponse"},"Classes/AWSLexVoiceButtonResponse.html#/c:objc(cs)AWSLexVoiceButtonResponse(py)audioStream":{"name":"audioStream","abstract":"<p>The audio stream . This may be null incase of a text response.</p>","parent_name":"AWSLexVoiceButtonResponse"},"Classes/AWSLexVoiceButtonResponse.html#/c:objc(cs)AWSLexVoiceButtonResponse(py)audioContentType":{"name":"audioContentType","abstract":"<p>The format for the audio stream. This may be null if the audion stream is null.</p>","parent_name":"AWSLexVoiceButtonResponse"},"Classes/AWSLexVoiceButtonResponse.html#/c:objc(cs)AWSLexVoiceButtonResponse(py)inputTranscript":{"name":"inputTranscript","abstract":"<p>Transcript of the voice input to the operation.</p>","parent_name":"AWSLexVoiceButtonResponse"},"Classes/AWSLex.html#/c:objc(cs)AWSLex(py)configuration":{"name":"configuration","abstract":"<p>The service configuration used to instantiate this service client.</p>","parent_name":"AWSLex"},"Classes/AWSLex.html#/c:objc(cs)AWSLex(cm)defaultLex":{"name":"+defaultLex","abstract":"<p>Returns the singleton service client. If the singleton object does not exist, the SDK instantiates the default service client with <code>defaultServiceConfiguration</code> from <code>[AWSServiceManager defaultServiceManager]</code>. The reference to this object is maintained by the SDK, and you do not need to retain it manually.</p>","parent_name":"AWSLex"},"Classes/AWSLex.html#/c:objc(cs)AWSLex(cm)registerLexWithConfiguration:forKey:":{"name":"+registerLexWithConfiguration:forKey:","abstract":"<p>Creates a service client with the given service configuration and registers it for the key.</p>","parent_name":"AWSLex"},"Classes/AWSLex.html#/c:objc(cs)AWSLex(cm)LexForKey:":{"name":"+LexForKey:","abstract":"<p>Retrieves the service client associated with the key. You need to call <code>+ registerLexWithConfiguration:forKey:</code> before invoking this method.</p>","parent_name":"AWSLex"},"Classes/AWSLex.html#/c:objc(cs)AWSLex(cm)removeLexForKey:":{"name":"+removeLexForKey:","abstract":"<p>Removes the service client associated with the key and release it.</p>","parent_name":"AWSLex"},"Classes/AWSLex.html#/c:objc(cs)AWSLex(im)deleteSession:":{"name":"-deleteSession:","abstract":"<p>Removes session information for a specified bot, alias, and user ID. </p>","parent_name":"AWSLex"},"Classes/AWSLex.html#/c:objc(cs)AWSLex(im)deleteSession:completionHandler:":{"name":"-deleteSession:completionHandler:","abstract":"<p>Removes session information for a specified bot, alias, and user ID. </p>","parent_name":"AWSLex"},"Classes/AWSLex.html#/c:objc(cs)AWSLex(im)getSession:":{"name":"-getSession:","abstract":"<p>Returns session information for a specified bot, alias, and user ID.</p>","parent_name":"AWSLex"},"Classes/AWSLex.html#/c:objc(cs)AWSLex(im)getSession:completionHandler:":{"name":"-getSession:completionHandler:","abstract":"<p>Returns session information for a specified bot, alias, and user ID.</p>","parent_name":"AWSLex"},"Classes/AWSLex.html#/c:objc(cs)AWSLex(im)postContent:":{"name":"-postContent:","abstract":"<p> Sends user input (text or speech) to Amazon Lex. Clients use this API to send text and audio requests to Amazon Lex at runtime. Amazon Lex interprets the user input using the machine learning model that it built for the bot. </p><p>The <code>PostContent</code> operation supports audio input at 8kHz and 16kHz. You can use 8kHz audio to achieve higher speech recognition accuracy in telephone audio applications. </p><p> In response, Amazon Lex returns the next message to convey to the user. Consider the following example messages: </p><ul><li><p> For a user input &ldquo;I would like a pizza,&rdquo; Amazon Lex might return a response with a message eliciting slot data (for example, <code>PizzaSize</code>): &ldquo;What size pizza would you like?&rdquo;. </p></li><li><p> After the user provides all of the pizza order information, Amazon Lex might return a response with a message to get user confirmation: &ldquo;Order the pizza?&rdquo;. </p></li><li><p> After the user replies &ldquo;Yes&rdquo; to the confirmation prompt, Amazon Lex might return a conclusion statement: &ldquo;Thank you, your cheese pizza has been ordered.&rdquo;. </p></li></ul><p> Not all Amazon Lex messages require a response from the user. For example, conclusion statements do not require a response. Some messages require only a yes or no response. In addition to the <code>message</code>, Amazon Lex provides additional context about the message in the response that you can use to enhance client behavior, such as displaying the appropriate client user interface. Consider the following examples: </p><ul><li><p> If the message is to elicit slot data, Amazon Lex returns the following context information: </p><ul><li><p><code>x-amz-lex-dialog-state</code> header set to <code>ElicitSlot</code></p></li><li><p><code>x-amz-lex-intent-name</code> header set to the intent name in the current context </p></li><li><p><code>x-amz-lex-slot-to-elicit</code> header set to the slot name for which the <code>message</code> is eliciting information </p></li><li><p><code>x-amz-lex-slots</code> header set to a map of slots configured for the intent with their current values </p></li></ul></li><li><p> If the message is a confirmation prompt, the <code>x-amz-lex-dialog-state</code> header is set to <code>Confirmation</code> and the <code>x-amz-lex-slot-to-elicit</code> header is omitted. </p></li><li><p> If the message is a clarification prompt configured for the intent, indicating that the user intent is not understood, the <code>x-amz-dialog-state</code> header is set to <code>ElicitIntent</code> and the <code>x-amz-slot-to-elicit</code> header is omitted. </p></li></ul><p> In addition, Amazon Lex also returns your application-specific <code>sessionAttributes</code>. For more information, see <a href=\"https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html\">Managing Conversation Context</a>. </p>","parent_name":"AWSLex"},"Classes/AWSLex.html#/c:objc(cs)AWSLex(im)postContent:completionHandler:":{"name":"-postContent:completionHandler:","abstract":"<p> Sends user input (text or speech) to Amazon Lex. Clients use this API to send text and audio requests to Amazon Lex at runtime. Amazon Lex interprets the user input using the machine learning model that it built for the bot. </p><p>The <code>PostContent</code> operation supports audio input at 8kHz and 16kHz. You can use 8kHz audio to achieve higher speech recognition accuracy in telephone audio applications. </p><p> In response, Amazon Lex returns the next message to convey to the user. Consider the following example messages: </p><ul><li><p> For a user input &ldquo;I would like a pizza,&rdquo; Amazon Lex might return a response with a message eliciting slot data (for example, <code>PizzaSize</code>): &ldquo;What size pizza would you like?&rdquo;. </p></li><li><p> After the user provides all of the pizza order information, Amazon Lex might return a response with a message to get user confirmation: &ldquo;Order the pizza?&rdquo;. </p></li><li><p> After the user replies &ldquo;Yes&rdquo; to the confirmation prompt, Amazon Lex might return a conclusion statement: &ldquo;Thank you, your cheese pizza has been ordered.&rdquo;. </p></li></ul><p> Not all Amazon Lex messages require a response from the user. For example, conclusion statements do not require a response. Some messages require only a yes or no response. In addition to the <code>message</code>, Amazon Lex provides additional context about the message in the response that you can use to enhance client behavior, such as displaying the appropriate client user interface. Consider the following examples: </p><ul><li><p> If the message is to elicit slot data, Amazon Lex returns the following context information: </p><ul><li><p><code>x-amz-lex-dialog-state</code> header set to <code>ElicitSlot</code></p></li><li><p><code>x-amz-lex-intent-name</code> header set to the intent name in the current context </p></li><li><p><code>x-amz-lex-slot-to-elicit</code> header set to the slot name for which the <code>message</code> is eliciting information </p></li><li><p><code>x-amz-lex-slots</code> header set to a map of slots configured for the intent with their current values </p></li></ul></li><li><p> If the message is a confirmation prompt, the <code>x-amz-lex-dialog-state</code> header is set to <code>Confirmation</code> and the <code>x-amz-lex-slot-to-elicit</code> header is omitted. </p></li><li><p> If the message is a clarification prompt configured for the intent, indicating that the user intent is not understood, the <code>x-amz-dialog-state</code> header is set to <code>ElicitIntent</code> and the <code>x-amz-slot-to-elicit</code> header is omitted. </p></li></ul><p> In addition, Amazon Lex also returns your application-specific <code>sessionAttributes</code>. For more information, see <a href=\"https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html\">Managing Conversation Context</a>. </p>","parent_name":"AWSLex"},"Classes/AWSLex.html#/c:objc(cs)AWSLex(im)postText:":{"name":"-postText:","abstract":"<p>Sends user input to Amazon Lex. Client applications can use this API to send requests to Amazon Lex at runtime. Amazon Lex then interprets the user input using the machine learning model it built for the bot. </p><p> In response, Amazon Lex returns the next <code>message</code> to convey to the user an optional <code>responseCard</code> to display. Consider the following example messages: </p><ul><li><p> For a user input &ldquo;I would like a pizza&rdquo;, Amazon Lex might return a response with a message eliciting slot data (for example, PizzaSize): &ldquo;What size pizza would you like?&rdquo; </p></li><li><p> After the user provides all of the pizza order information, Amazon Lex might return a response with a message to obtain user confirmation &ldquo;Proceed with the pizza order?&rdquo;. </p></li><li><p> After the user replies to a confirmation prompt with a &ldquo;yes&rdquo;, Amazon Lex might return a conclusion statement: &ldquo;Thank you, your cheese pizza has been ordered.&rdquo;. </p></li></ul><p> Not all Amazon Lex messages require a user response. For example, a conclusion statement does not require a response. Some messages require only a &ldquo;yes&rdquo; or &ldquo;no&rdquo; user response. In addition to the <code>message</code>, Amazon Lex provides additional context about the message in the response that you might use to enhance client behavior, for example, to display the appropriate client user interface. These are the <code>slotToElicit</code>, <code>dialogState</code>, <code>intentName</code>, and <code>slots</code> fields in the response. Consider the following examples: </p><ul><li><p>If the message is to elicit slot data, Amazon Lex returns the following context information:</p><ul><li><p><code>dialogState</code> set to ElicitSlot </p></li><li><p><code>intentName</code> set to the intent name in the current context </p></li><li><p><code>slotToElicit</code> set to the slot name for which the <code>message</code> is eliciting information </p></li><li><p><code>slots</code> set to a map of slots, configured for the intent, with currently known values </p></li></ul></li><li><p> If the message is a confirmation prompt, the <code>dialogState</code> is set to ConfirmIntent and <code>SlotToElicit</code> is set to null. </p></li><li><p>If the message is a clarification prompt (configured for the intent) that indicates that user intent is not understood, the <code>dialogState</code> is set to ElicitIntent and <code>slotToElicit</code> is set to null. </p></li></ul><p> In addition, Amazon Lex also returns your application-specific <code>sessionAttributes</code>. For more information, see <a href=\"https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html\">Managing Conversation Context</a>. </p>","parent_name":"AWSLex"},"Classes/AWSLex.html#/c:objc(cs)AWSLex(im)postText:completionHandler:":{"name":"-postText:completionHandler:","abstract":"<p>Sends user input to Amazon Lex. Client applications can use this API to send requests to Amazon Lex at runtime. Amazon Lex then interprets the user input using the machine learning model it built for the bot. </p><p> In response, Amazon Lex returns the next <code>message</code> to convey to the user an optional <code>responseCard</code> to display. Consider the following example messages: </p><ul><li><p> For a user input &ldquo;I would like a pizza&rdquo;, Amazon Lex might return a response with a message eliciting slot data (for example, PizzaSize): &ldquo;What size pizza would you like?&rdquo; </p></li><li><p> After the user provides all of the pizza order information, Amazon Lex might return a response with a message to obtain user confirmation &ldquo;Proceed with the pizza order?&rdquo;. </p></li><li><p> After the user replies to a confirmation prompt with a &ldquo;yes&rdquo;, Amazon Lex might return a conclusion statement: &ldquo;Thank you, your cheese pizza has been ordered.&rdquo;. </p></li></ul><p> Not all Amazon Lex messages require a user response. For example, a conclusion statement does not require a response. Some messages require only a &ldquo;yes&rdquo; or &ldquo;no&rdquo; user response. In addition to the <code>message</code>, Amazon Lex provides additional context about the message in the response that you might use to enhance client behavior, for example, to display the appropriate client user interface. These are the <code>slotToElicit</code>, <code>dialogState</code>, <code>intentName</code>, and <code>slots</code> fields in the response. Consider the following examples: </p><ul><li><p>If the message is to elicit slot data, Amazon Lex returns the following context information:</p><ul><li><p><code>dialogState</code> set to ElicitSlot </p></li><li><p><code>intentName</code> set to the intent name in the current context </p></li><li><p><code>slotToElicit</code> set to the slot name for which the <code>message</code> is eliciting information </p></li><li><p><code>slots</code> set to a map of slots, configured for the intent, with currently known values </p></li></ul></li><li><p> If the message is a confirmation prompt, the <code>dialogState</code> is set to ConfirmIntent and <code>SlotToElicit</code> is set to null. </p></li><li><p>If the message is a clarification prompt (configured for the intent) that indicates that user intent is not understood, the <code>dialogState</code> is set to ElicitIntent and <code>slotToElicit</code> is set to null. </p></li></ul><p> In addition, Amazon Lex also returns your application-specific <code>sessionAttributes</code>. For more information, see <a href=\"https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html\">Managing Conversation Context</a>. </p>","parent_name":"AWSLex"},"Classes/AWSLex.html#/c:objc(cs)AWSLex(im)putSession:":{"name":"-putSession:","abstract":"<p>Creates a new session or modifies an existing session with an Amazon Lex bot. Use this operation to enable your application to set the state of the bot.</p><p>For more information, see <a href=\"https://docs.aws.amazon.com/lex/latest/dg/how-session-api.html\">Managing Sessions</a>.</p>","parent_name":"AWSLex"},"Classes/AWSLex.html#/c:objc(cs)AWSLex(im)putSession:completionHandler:":{"name":"-putSession:completionHandler:","abstract":"<p>Creates a new session or modifies an existing session with an Amazon Lex bot. Use this operation to enable your application to set the state of the bot.</p><p>For more information, see <a href=\"https://docs.aws.amazon.com/lex/latest/dg/how-session-api.html\">Managing Sessions</a>.</p>","parent_name":"AWSLex"},"Classes/AWSLexResources.html#/c:objc(cs)AWSLexResources(cm)sharedInstance":{"name":"+sharedInstance","abstract":"<p>Undocumented</p>","parent_name":"AWSLexResources"},"Classes/AWSLexResources.html#/c:objc(cs)AWSLexResources(im)JSONObject":{"name":"-JSONObject","abstract":"<p>Undocumented</p>","parent_name":"AWSLexResources"},"Classes/AWSLexSentimentResponse.html#/c:objc(cs)AWSLexSentimentResponse(py)sentimentLabel":{"name":"sentimentLabel","abstract":"<p>The inferred sentiment that Amazon Comprehend has the highest confidence in.</p>","parent_name":"AWSLexSentimentResponse"},"Classes/AWSLexSentimentResponse.html#/c:objc(cs)AWSLexSentimentResponse(py)sentimentScore":{"name":"sentimentScore","abstract":"<p>The likelihood that the sentiment was correctly inferred.</p>","parent_name":"AWSLexSentimentResponse"},"Classes/AWSLexResponseCard.html#/c:objc(cs)AWSLexResponseCard(py)contentType":{"name":"contentType","abstract":"<p>The content type of the response.</p>","parent_name":"AWSLexResponseCard"},"Classes/AWSLexResponseCard.html#/c:objc(cs)AWSLexResponseCard(py)genericAttachments":{"name":"genericAttachments","abstract":"<p>An array of attachment objects representing options.</p>","parent_name":"AWSLexResponseCard"},"Classes/AWSLexResponseCard.html#/c:objc(cs)AWSLexResponseCard(py)version":{"name":"version","abstract":"<p>The version of the response card format.</p>","parent_name":"AWSLexResponseCard"},"Classes/AWSLexPutSessionResponse.html#/c:objc(cs)AWSLexPutSessionResponse(py)audioStream":{"name":"audioStream","abstract":"<p>The audio version of the message to convey to the user.</p>","parent_name":"AWSLexPutSessionResponse"},"Classes/AWSLexPutSessionResponse.html#/c:objc(cs)AWSLexPutSessionResponse(py)contentType":{"name":"contentType","abstract":"<p>Content type as specified in the <code>Accept</code> HTTP header in the request.</p>","parent_name":"AWSLexPutSessionResponse"},"Classes/AWSLexPutSessionResponse.html#/c:objc(cs)AWSLexPutSessionResponse(py)dialogState":{"name":"dialogState","abstract":"<p><p/><ul><li><p><code>ConfirmIntent</code> - Amazon Lex is expecting a <q>yes</q> or <q>no</q> response to confirm the intent before fulfilling an intent.</p></li><li><p><code>ElicitIntent</code> - Amazon Lex wants to elicit the user&rsquo;s intent.</p></li><li><p><code>ElicitSlot</code> - Amazon Lex is expecting the value of a slot for the current intent.</p></li><li><p><code>Failed</code> - Conveys that the conversation with the user has failed. This can happen for various reasons, including the user does not provide an appropriate response to prompts from the service, or if the Lambda function fails to fulfill the intent.</p></li><li><p><code>Fulfilled</code> - Conveys that the Lambda function has sucessfully fulfilled the intent.</p></li><li><p><code>ReadyForFulfillment</code> - Conveys that the client has to fulfill the intent.</p></li></ul></p>","parent_name":"AWSLexPutSessionResponse"},"Classes/AWSLexPutSessionResponse.html#/c:objc(cs)AWSLexPutSessionResponse(py)intentName":{"name":"intentName","abstract":"<p>The name of the current intent.</p>","parent_name":"AWSLexPutSessionResponse"},"Classes/AWSLexPutSessionResponse.html#/c:objc(cs)AWSLexPutSessionResponse(py)message":{"name":"message","abstract":"<p>The next message that should be presented to the user.</p>","parent_name":"AWSLexPutSessionResponse"},"Classes/AWSLexPutSessionResponse.html#/c:objc(cs)AWSLexPutSessionResponse(py)messageFormat":{"name":"messageFormat","abstract":"<p><p>The format of the response message. One of the following values:</p><ul><li><p><code>PlainText</code> - The message contains plain UTF-8 text.</p></li><li><p><code>CustomPayload</code> - The message is a custom format for the client.</p></li><li><p><code>SSML</code> - The message contains text formatted for voice output.</p></li><li><p><code>Composite</code> - The message contains an escaped JSON object containing one or more messages from the groups that messages were assigned to when the intent was created.</p></li></ul></p>","parent_name":"AWSLexPutSessionResponse"},"Classes/AWSLexPutSessionResponse.html#/c:objc(cs)AWSLexPutSessionResponse(py)sessionAttributes":{"name":"sessionAttributes","abstract":"<p>Map of key/value pairs representing session-specific context information.</p>","parent_name":"AWSLexPutSessionResponse"},"Classes/AWSLexPutSessionResponse.html#/c:objc(cs)AWSLexPutSessionResponse(py)sessionId":{"name":"sessionId","abstract":"<p>A unique identifier for the session.</p>","parent_name":"AWSLexPutSessionResponse"},"Classes/AWSLexPutSessionResponse.html#/c:objc(cs)AWSLexPutSessionResponse(py)slotToElicit":{"name":"slotToElicit","abstract":"<p>If the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/AWSLexPutSessionResponse.html#/c:objc(cs)AWSLexPutSessionResponse(py)dialogState\">dialogState</a></code> is <code>ElicitSlot</code>, returns the name of the slot for which Amazon Lex is eliciting a value.</p>","parent_name":"AWSLexPutSessionResponse"},"Classes/AWSLexPutSessionResponse.html#/c:objc(cs)AWSLexPutSessionResponse(py)slots":{"name":"slots","abstract":"<p>Map of zero or more intent slots Amazon Lex detected from the user input during the conversation.</p><p>Amazon Lex creates a resolution list containing likely values for a slot. The value that it returns is determined by the <code>valueSelectionStrategy</code> selected when the slot type was created or updated. If <code>valueSelectionStrategy</code> is set to <code>ORIGINAL_VALUE</code>, the value provided by the user is returned, if the user value is similar to the slot values. If <code>valueSelectionStrategy</code> is set to <code>TOP_RESOLUTION</code> Amazon Lex returns the first value in the resolution list or, if there is no resolution list, null. If you don&rsquo;t specify a <code>valueSelectionStrategy</code> the default is <code>ORIGINAL_VALUE</code>. </p>","parent_name":"AWSLexPutSessionResponse"},"Classes/AWSLexPutSessionRequest.html#/c:objc(cs)AWSLexPutSessionRequest(py)accept":{"name":"accept","abstract":"<p><p>The message that Amazon Lex returns in the response can be either text or speech based depending on the value of this field.</p><ul><li><p>If the value is <code>text/plain; charset=utf-8</code>, Amazon Lex returns text in the response.</p></li><li><p>If the value begins with <code>audio/</code>, Amazon Lex returns speech in the response. Amazon Lex uses Amazon Polly to generate the speech in the configuration that you specify. For example, if you specify <code>audio/mpeg</code> as the value, Amazon Lex returns speech in the MPEG format.</p></li><li><p>If the value is <code>audio/pcm</code>, the speech is returned as <code>audio/pcm</code> in 16-bit, little endian format.</p></li><li><p>The following are the accepted values:</p><ul><li><p><code>audio/mpeg</code></p></li><li><p><code>audio/ogg</code></p></li><li><p><code>audio/pcm</code></p></li><li><p><code>audio/*</code> (defaults to mpeg)</p></li><li><p><code>text/plain; charset=utf-8</code></p></li></ul></li></ul></p>","parent_name":"AWSLexPutSessionRequest"},"Classes/AWSLexPutSessionRequest.html#/c:objc(cs)AWSLexPutSessionRequest(py)botAlias":{"name":"botAlias","abstract":"<p>The alias in use for the bot that contains the session data.</p>","parent_name":"AWSLexPutSessionRequest"},"Classes/AWSLexPutSessionRequest.html#/c:objc(cs)AWSLexPutSessionRequest(py)botName":{"name":"botName","abstract":"<p>The name of the bot that contains the session data.</p>","parent_name":"AWSLexPutSessionRequest"},"Classes/AWSLexPutSessionRequest.html#/c:objc(cs)AWSLexPutSessionRequest(py)dialogAction":{"name":"dialogAction","abstract":"<p>Sets the next action that the bot should take to fulfill the conversation.</p>","parent_name":"AWSLexPutSessionRequest"},"Classes/AWSLexPutSessionRequest.html#/c:objc(cs)AWSLexPutSessionRequest(py)recentIntentSummaryView":{"name":"recentIntentSummaryView","abstract":"<p>A summary of the recent intents for the bot. You can use the intent summary view to set a checkpoint label on an intent and modify attributes of intents. You can also use it to remove or add intent summary objects to the list.</p><p>An intent that you modify or add to the list must make sense for the bot. For example, the intent name must be valid for the bot. You must provide valid values for:</p><ul><li><p><code>intentName</code></p></li><li><p>slot names</p></li><li><p><code>slotToElict</code></p></li></ul><p>If you send the <code>recentIntentSummaryView</code> parameter in a <code>PutSession</code> request, the contents of the new summary view replaces the old summary view. For example, if a <code>GetSession</code> request returns three intents in the summary view and you call <code>PutSession</code> with one intent in the summary view, the next call to <code>GetSession</code> will only return one intent.</p>","parent_name":"AWSLexPutSessionRequest"},"Classes/AWSLexPutSessionRequest.html#/c:objc(cs)AWSLexPutSessionRequest(py)sessionAttributes":{"name":"sessionAttributes","abstract":"<p>Map of key/value pairs representing the session-specific context information. It contains application information passed between Amazon Lex and a client application.</p>","parent_name":"AWSLexPutSessionRequest"},"Classes/AWSLexPutSessionRequest.html#/c:objc(cs)AWSLexPutSessionRequest(py)userId":{"name":"userId","abstract":"<p>The ID of the client application user. Amazon Lex uses this to identify a user&rsquo;s conversation with your bot. </p>","parent_name":"AWSLexPutSessionRequest"},"Classes/AWSLexPostTextResponse.html#/c:objc(cs)AWSLexPostTextResponse(py)dialogState":{"name":"dialogState","abstract":"<p><p> Identifies the current state of the user interaction. Amazon Lex returns one of the following values as <code>dialogState</code>. The client can optionally use this information to customize the user interface. </p><ul><li><p><code>ElicitIntent</code> - Amazon Lex wants to elicit user intent. </p><p>For example, a user might utter an intent (<q>I want to order a pizza</q>). If Amazon Lex cannot infer the user intent from this utterance, it will return this dialogState.</p></li><li><p><code>ConfirmIntent</code> - Amazon Lex is expecting a <q>yes</q> or <q>no</q> response. </p><p> For example, Amazon Lex wants user confirmation before fulfilling an intent. </p><p>Instead of a simple <q>yes</q> or <q>no,</q> a user might respond with additional information. For example, <q>yes, but make it thick crust pizza</q> or <q>no, I want to order a drink</q>. Amazon Lex can process such additional information (in these examples, update the crust type slot value, or change intent from OrderPizza to OrderDrink).</p></li><li><p><code>ElicitSlot</code> - Amazon Lex is expecting a slot value for the current intent. </p><p>For example, suppose that in the response Amazon Lex sends this message: <q>What size pizza would you like?</q>. A user might reply with the slot value (e.g., <q>medium</q>). The user might also provide additional information in the response (e.g., <q>medium thick crust pizza</q>). Amazon Lex can process such additional information appropriately. </p></li><li><p><code>Fulfilled</code> - Conveys that the Lambda function configured for the intent has successfully fulfilled the intent. </p></li><li><p><code>ReadyForFulfillment</code> - Conveys that the client has to fulfill the intent. </p></li><li><p><code>Failed</code> - Conveys that the conversation with the user failed. </p><p> This can happen for various reasons including that the user did not provide an appropriate response to prompts from the service (you can configure how many times Amazon Lex can prompt a user for specific information), or the Lambda function failed to fulfill the intent. </p></li></ul></p>","parent_name":"AWSLexPostTextResponse"},"Classes/AWSLexPostTextResponse.html#/c:objc(cs)AWSLexPostTextResponse(py)intentName":{"name":"intentName","abstract":"<p>The current user intent that Amazon Lex is aware of.</p>","parent_name":"AWSLexPostTextResponse"},"Classes/AWSLexPostTextResponse.html#/c:objc(cs)AWSLexPostTextResponse(py)message":{"name":"message","abstract":"<p>The message to convey to the user. The message can come from the bot&rsquo;s configuration or from a Lambda function.</p><p>If the intent is not configured with a Lambda function, or if the Lambda function returned <code>Delegate</code> as the <code>dialogAction.type</code> its response, Amazon Lex decides on the next course of action and selects an appropriate message from the bot&rsquo;s configuration based on the current interaction context. For example, if Amazon Lex isn&rsquo;t able to understand user input, it uses a clarification prompt message.</p><p>When you create an intent you can assign messages to groups. When messages are assigned to groups Amazon Lex returns one message from each group in the response. The message field is an escaped JSON string containing the messages. For more information about the structure of the JSON string returned, see <a>msg-prompts-formats</a>.</p><p>If the Lambda function returns a message, Amazon Lex passes it to the client in its response.</p>","parent_name":"AWSLexPostTextResponse"},"Classes/AWSLexPostTextResponse.html#/c:objc(cs)AWSLexPostTextResponse(py)messageFormat":{"name":"messageFormat","abstract":"<p><p>The format of the response message. One of the following values:</p><ul><li><p><code>PlainText</code> - The message contains plain UTF-8 text.</p></li><li><p><code>CustomPayload</code> - The message is a custom format defined by the Lambda function.</p></li><li><p><code>SSML</code> - The message contains text formatted for voice output.</p></li><li><p><code>Composite</code> - The message contains an escaped JSON object containing one or more messages from the groups that messages were assigned to when the intent was created.</p></li></ul></p>","parent_name":"AWSLexPostTextResponse"},"Classes/AWSLexPostTextResponse.html#/c:objc(cs)AWSLexPostTextResponse(py)responseCard":{"name":"responseCard","abstract":"<p>Represents the options that the user has to respond to the current prompt. Response Card can come from the bot configuration (in the Amazon Lex console, choose the settings button next to a slot) or from a code hook (Lambda function). </p>","parent_name":"AWSLexPostTextResponse"},"Classes/AWSLexPostTextResponse.html#/c:objc(cs)AWSLexPostTextResponse(py)sentimentResponse":{"name":"sentimentResponse","abstract":"<p>The sentiment expressed in and utterance.</p><p>When the bot is configured to send utterances to Amazon Comprehend for sentiment analysis, this field contains the result of the analysis.</p>","parent_name":"AWSLexPostTextResponse"},"Classes/AWSLexPostTextResponse.html#/c:objc(cs)AWSLexPostTextResponse(py)sessionAttributes":{"name":"sessionAttributes","abstract":"<p>A map of key-value pairs representing the session-specific context information.</p>","parent_name":"AWSLexPostTextResponse"},"Classes/AWSLexPostTextResponse.html#/c:objc(cs)AWSLexPostTextResponse(py)sessionId":{"name":"sessionId","abstract":"<p>A unique identifier for the session.</p>","parent_name":"AWSLexPostTextResponse"},"Classes/AWSLexPostTextResponse.html#/c:objc(cs)AWSLexPostTextResponse(py)slotToElicit":{"name":"slotToElicit","abstract":"<p>If the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/AWSLexPostTextResponse.html#/c:objc(cs)AWSLexPostTextResponse(py)dialogState\">dialogState</a></code> value is <code>ElicitSlot</code>, returns the name of the slot for which Amazon Lex is eliciting a value. </p>","parent_name":"AWSLexPostTextResponse"},"Classes/AWSLexPostTextResponse.html#/c:objc(cs)AWSLexPostTextResponse(py)slots":{"name":"slots","abstract":"<p> The intent slots that Amazon Lex detected from the user input in the conversation. </p><p>Amazon Lex creates a resolution list containing likely values for a slot. The value that it returns is determined by the <code>valueSelectionStrategy</code> selected when the slot type was created or updated. If <code>valueSelectionStrategy</code> is set to <code>ORIGINAL_VALUE</code>, the value provided by the user is returned, if the user value is similar to the slot values. If <code>valueSelectionStrategy</code> is set to <code>TOP_RESOLUTION</code> Amazon Lex returns the first value in the resolution list or, if there is no resolution list, null. If you don&rsquo;t specify a <code>valueSelectionStrategy</code>, the default is <code>ORIGINAL_VALUE</code>.</p>","parent_name":"AWSLexPostTextResponse"},"Classes/AWSLexPostTextRequest.html#/c:objc(cs)AWSLexPostTextRequest(py)botAlias":{"name":"botAlias","abstract":"<p>The alias of the Amazon Lex bot.</p>","parent_name":"AWSLexPostTextRequest"},"Classes/AWSLexPostTextRequest.html#/c:objc(cs)AWSLexPostTextRequest(py)botName":{"name":"botName","abstract":"<p>The name of the Amazon Lex bot.</p>","parent_name":"AWSLexPostTextRequest"},"Classes/AWSLexPostTextRequest.html#/c:objc(cs)AWSLexPostTextRequest(py)inputText":{"name":"inputText","abstract":"<p>The text that the user entered (Amazon Lex interprets this text).</p>","parent_name":"AWSLexPostTextRequest"},"Classes/AWSLexPostTextRequest.html#/c:objc(cs)AWSLexPostTextRequest(py)requestAttributes":{"name":"requestAttributes","abstract":"<p>Request-specific information passed between Amazon Lex and a client application.</p><p>The namespace <code>x-amz-lex:</code> is reserved for special attributes. Don&rsquo;t create any request attributes with the prefix <code>x-amz-lex:</code>.</p><p>For more information, see <a href=\"https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-request-attribs\">Setting Request Attributes</a>.</p>","parent_name":"AWSLexPostTextRequest"},"Classes/AWSLexPostTextRequest.html#/c:objc(cs)AWSLexPostTextRequest(py)sessionAttributes":{"name":"sessionAttributes","abstract":"<p>Application-specific information passed between Amazon Lex and a client application.</p><p>For more information, see <a href=\"https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-session-attribs\">Setting Session Attributes</a>.</p>","parent_name":"AWSLexPostTextRequest"},"Classes/AWSLexPostTextRequest.html#/c:objc(cs)AWSLexPostTextRequest(py)userId":{"name":"userId","abstract":"<p><p>The ID of the client application user. Amazon Lex uses this to identify a user&rsquo;s conversation with your bot. At runtime, each request must contain the <code>userID</code> field.</p><p>To decide the user ID to use for your application, consider the following factors.</p><ul><li><p>The <code>userID</code> field must not contain any personally identifiable information of the user, for example, name, personal identification numbers, or other end user personal information.</p></li><li><p>If you want a user to start a conversation on one device and continue on another device, use a user-specific identifier.</p></li><li><p>If you want the same user to be able to have two independent conversations on two different devices, choose a device-specific identifier.</p></li><li><p>A user can&rsquo;t have two independent conversations with two different versions of the same bot. For example, a user can&rsquo;t have a conversation with the PROD and BETA versions of the same bot. If you anticipate that a user will need to have conversation with two different versions, for example, while testing, include the bot alias in the user ID to separate the two conversations.</p></li></ul></p>","parent_name":"AWSLexPostTextRequest"},"Classes/AWSLexPostContentResponse.html#/c:objc(cs)AWSLexPostContentResponse(py)audioStream":{"name":"audioStream","abstract":"<p>The prompt (or statement) to convey to the user. This is based on the bot configuration and context. For example, if Amazon Lex did not understand the user intent, it sends the <code>clarificationPrompt</code> configured for the bot. If the intent requires confirmation before taking the fulfillment action, it sends the <code>confirmationPrompt</code>. Another example: Suppose that the Lambda function successfully fulfilled the intent, and sent a message to convey to the user. Then Amazon Lex sends that message in the response. </p>","parent_name":"AWSLexPostContentResponse"},"Classes/AWSLexPostContentResponse.html#/c:objc(cs)AWSLexPostContentResponse(py)contentType":{"name":"contentType","abstract":"<p>Content type as specified in the <code>Accept</code> HTTP header in the request.</p>","parent_name":"AWSLexPostContentResponse"},"Classes/AWSLexPostContentResponse.html#/c:objc(cs)AWSLexPostContentResponse(py)dialogState":{"name":"dialogState","abstract":"<p><p>Identifies the current state of the user interaction. Amazon Lex returns one of the following values as <code>dialogState</code>. The client can optionally use this information to customize the user interface. </p><ul><li><p><code>ElicitIntent</code> - Amazon Lex wants to elicit the user&rsquo;s intent. Consider the following examples: </p><p> For example, a user might utter an intent (<q>I want to order a pizza</q>). If Amazon Lex cannot infer the user intent from this utterance, it will return this dialog state. </p></li><li><p><code>ConfirmIntent</code> - Amazon Lex is expecting a <q>yes</q> or <q>no</q> response. </p><p>For example, Amazon Lex wants user confirmation before fulfilling an intent. Instead of a simple <q>yes</q> or <q>no</q> response, a user might respond with additional information. For example, <q>yes, but make it a thick crust pizza</q> or <q>no, I want to order a drink.</q> Amazon Lex can process such additional information (in these examples, update the crust type slot or change the intent from OrderPizza to OrderDrink). </p></li><li><p><code>ElicitSlot</code> - Amazon Lex is expecting the value of a slot for the current intent. </p><p> For example, suppose that in the response Amazon Lex sends this message: <q>What size pizza would you like?</q>. A user might reply with the slot value (e.g., <q>medium</q>). The user might also provide additional information in the response (e.g., <q>medium thick crust pizza</q>). Amazon Lex can process such additional information appropriately. </p></li><li><p><code>Fulfilled</code> - Conveys that the Lambda function has successfully fulfilled the intent. </p></li><li><p><code>ReadyForFulfillment</code> - Conveys that the client has to fulfill the request. </p></li><li><p><code>Failed</code> - Conveys that the conversation with the user failed. </p><p> This can happen for various reasons, including that the user does not provide an appropriate response to prompts from the service (you can configure how many times Amazon Lex can prompt a user for specific information), or if the Lambda function fails to fulfill the intent. </p></li></ul></p>","parent_name":"AWSLexPostContentResponse"},"Classes/AWSLexPostContentResponse.html#/c:objc(cs)AWSLexPostContentResponse(py)inputTranscript":{"name":"inputTranscript","abstract":"<p>The text used to process the request.</p><p>If the input was an audio stream, the <code>inputTranscript</code> field contains the text extracted from the audio stream. This is the text that is actually processed to recognize intents and slot values. You can use this information to determine if Amazon Lex is correctly processing the audio that you send.</p>","parent_name":"AWSLexPostContentResponse"},"Classes/AWSLexPostContentResponse.html#/c:objc(cs)AWSLexPostContentResponse(py)intentName":{"name":"intentName","abstract":"<p>Current user intent that Amazon Lex is aware of.</p>","parent_name":"AWSLexPostContentResponse"},"Classes/AWSLexPostContentResponse.html#/c:objc(cs)AWSLexPostContentResponse(py)message":{"name":"message","abstract":"<p>The message to convey to the user. The message can come from the bot&rsquo;s configuration or from a Lambda function.</p><p>If the intent is not configured with a Lambda function, or if the Lambda function returned <code>Delegate</code> as the <code>dialogAction.type</code> in its response, Amazon Lex decides on the next course of action and selects an appropriate message from the bot&rsquo;s configuration based on the current interaction context. For example, if Amazon Lex isn&rsquo;t able to understand user input, it uses a clarification prompt message.</p><p>When you create an intent you can assign messages to groups. When messages are assigned to groups Amazon Lex returns one message from each group in the response. The message field is an escaped JSON string containing the messages. For more information about the structure of the JSON string returned, see <a>msg-prompts-formats</a>.</p><p>If the Lambda function returns a message, Amazon Lex passes it to the client in its response.</p>","parent_name":"AWSLexPostContentResponse"},"Classes/AWSLexPostContentResponse.html#/c:objc(cs)AWSLexPostContentResponse(py)messageFormat":{"name":"messageFormat","abstract":"<p><p>The format of the response message. One of the following values:</p><ul><li><p><code>PlainText</code> - The message contains plain UTF-8 text.</p></li><li><p><code>CustomPayload</code> - The message is a custom format for the client.</p></li><li><p><code>SSML</code> - The message contains text formatted for voice output.</p></li><li><p><code>Composite</code> - The message contains an escaped JSON object containing one or more messages from the groups that messages were assigned to when the intent was created.</p></li></ul></p>","parent_name":"AWSLexPostContentResponse"},"Classes/AWSLexPostContentResponse.html#/c:objc(cs)AWSLexPostContentResponse(py)sentimentResponse":{"name":"sentimentResponse","abstract":"<p>The sentiment expressed in and utterance.</p><p>When the bot is configured to send utterances to Amazon Comprehend for sentiment analysis, this field contains the result of the analysis.</p>","parent_name":"AWSLexPostContentResponse"},"Classes/AWSLexPostContentResponse.html#/c:objc(cs)AWSLexPostContentResponse(py)sessionAttributes":{"name":"sessionAttributes","abstract":"<p> Map of key/value pairs representing the session-specific context information. </p>","parent_name":"AWSLexPostContentResponse"},"Classes/AWSLexPostContentResponse.html#/c:objc(cs)AWSLexPostContentResponse(py)sessionId":{"name":"sessionId","abstract":"<p>The unique identifier for the session.</p>","parent_name":"AWSLexPostContentResponse"},"Classes/AWSLexPostContentResponse.html#/c:objc(cs)AWSLexPostContentResponse(py)slotToElicit":{"name":"slotToElicit","abstract":"<p> If the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/AWSLexPostContentResponse.html#/c:objc(cs)AWSLexPostContentResponse(py)dialogState\">dialogState</a></code> value is <code>ElicitSlot</code>, returns the name of the slot for which Amazon Lex is eliciting a value. </p>","parent_name":"AWSLexPostContentResponse"},"Classes/AWSLexPostContentResponse.html#/c:objc(cs)AWSLexPostContentResponse(py)slots":{"name":"slots","abstract":"<p>Map of zero or more intent slots (name/value pairs) Amazon Lex detected from the user input during the conversation. The field is base-64 encoded.</p><p>Amazon Lex creates a resolution list containing likely values for a slot. The value that it returns is determined by the <code>valueSelectionStrategy</code> selected when the slot type was created or updated. If <code>valueSelectionStrategy</code> is set to <code>ORIGINAL_VALUE</code>, the value provided by the user is returned, if the user value is similar to the slot values. If <code>valueSelectionStrategy</code> is set to <code>TOP_RESOLUTION</code> Amazon Lex returns the first value in the resolution list or, if there is no resolution list, null. If you don&rsquo;t specify a <code>valueSelectionStrategy</code>, the default is <code>ORIGINAL_VALUE</code>.</p>","parent_name":"AWSLexPostContentResponse"},"Classes/AWSLexPostContentRequest.html#/c:objc(cs)AWSLexPostContentRequest(py)accept":{"name":"accept","abstract":"<p><p> You pass this value as the <code>Accept</code> HTTP header. </p><p> The message Amazon Lex returns in the response can be either text or speech based on the <code>Accept</code> HTTP header value in the request. </p><ul><li><p> If the value is <code>text/plain; charset=utf-8</code>, Amazon Lex returns text in the response. </p></li><li><p> If the value begins with <code>audio/</code>, Amazon Lex returns speech in the response. Amazon Lex uses Amazon Polly to generate the speech (using the configuration you specified in the <code>Accept</code> header). For example, if you specify <code>audio/mpeg</code> as the value, Amazon Lex returns speech in the MPEG format.</p></li><li><p>If the value is <code>audio/pcm</code>, the speech returned is <code>audio/pcm</code> in 16-bit, little endian format. </p></li><li><p>The following are the accepted values:</p><ul><li><p>audio/mpeg</p></li><li><p>audio/ogg</p></li><li><p>audio/pcm</p></li><li><p>text/plain; charset=utf-8</p></li><li><p>audio/* (defaults to mpeg)</p></li></ul></li></ul></p>","parent_name":"AWSLexPostContentRequest"},"Classes/AWSLexPostContentRequest.html#/c:objc(cs)AWSLexPostContentRequest(py)botAlias":{"name":"botAlias","abstract":"<p>Alias of the Amazon Lex bot.</p>","parent_name":"AWSLexPostContentRequest"},"Classes/AWSLexPostContentRequest.html#/c:objc(cs)AWSLexPostContentRequest(py)botName":{"name":"botName","abstract":"<p>Name of the Amazon Lex bot.</p>","parent_name":"AWSLexPostContentRequest"},"Classes/AWSLexPostContentRequest.html#/c:objc(cs)AWSLexPostContentRequest(py)contentType":{"name":"contentType","abstract":"<p><p> You pass this value as the <code>Content-Type</code> HTTP header. </p><p> Indicates the audio format or text. The header value must start with one of the following prefixes: </p><ul><li><p>PCM format, audio data must be in little-endian byte order.</p><ul><li><p>audio/l16; rate=16000; channels=1</p></li><li><p>audio/x-l16; sample-rate=16000; channel-count=1</p></li><li><p>audio/lpcm; sample-rate=8000; sample-size-bits=16; channel-count=1; is-big-endian=false </p></li></ul></li><li><p>Opus format</p><ul><li><p>audio/x-cbr-opus-with-preamble; preamble-size=0; bit-rate=256000; frame-size-milliseconds=4</p></li></ul></li><li><p>Text format</p><ul><li><p>text/plain; charset=utf-8</p></li></ul></li></ul></p>","parent_name":"AWSLexPostContentRequest"},"Classes/AWSLexPostContentRequest.html#/c:objc(cs)AWSLexPostContentRequest(py)inputStream":{"name":"inputStream","abstract":"<p> User input in PCM or Opus audio format or text format as described in the <code>Content-Type</code> HTTP header. </p><p>You can stream audio data to Amazon Lex or you can create a local buffer that captures all of the audio data before sending. In general, you get better performance if you stream audio data rather than buffering the data locally.</p>","parent_name":"AWSLexPostContentRequest"},"Classes/AWSLexPostContentRequest.html#/c:objc(cs)AWSLexPostContentRequest(py)requestAttributes":{"name":"requestAttributes","abstract":"<p>You pass this value as the <code>x-amz-lex-request-attributes</code> HTTP header.</p><p>Request-specific information passed between Amazon Lex and a client application. The value must be a JSON serialized and base64 encoded map with string keys and values. The total size of the <code>requestAttributes</code> and <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/AWSLexPostContentRequest.html#/c:objc(cs)AWSLexPostContentRequest(py)sessionAttributes\">sessionAttributes</a></code> headers is limited to 12 KB.</p><p>The namespace <code>x-amz-lex:</code> is reserved for special attributes. Don&rsquo;t create any request attributes with the prefix <code>x-amz-lex:</code>.</p><p>For more information, see <a href=\"https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-request-attribs\">Setting Request Attributes</a>.</p>","parent_name":"AWSLexPostContentRequest"},"Classes/AWSLexPostContentRequest.html#/c:objc(cs)AWSLexPostContentRequest(py)sessionAttributes":{"name":"sessionAttributes","abstract":"<p>You pass this value as the <code>x-amz-lex-session-attributes</code> HTTP header.</p><p>Application-specific information passed between Amazon Lex and a client application. The value must be a JSON serialized and base64 encoded map with string keys and values. The total size of the <code>sessionAttributes</code> and <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/AWSLexPostContentRequest.html#/c:objc(cs)AWSLexPostContentRequest(py)requestAttributes\">requestAttributes</a></code> headers is limited to 12 KB.</p><p>For more information, see <a href=\"https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-session-attribs\">Setting Session Attributes</a>.</p>","parent_name":"AWSLexPostContentRequest"},"Classes/AWSLexPostContentRequest.html#/c:objc(cs)AWSLexPostContentRequest(py)userId":{"name":"userId","abstract":"<p><p>The ID of the client application user. Amazon Lex uses this to identify a user&rsquo;s conversation with your bot. At runtime, each request must contain the <code>userID</code> field.</p><p>To decide the user ID to use for your application, consider the following factors.</p><ul><li><p>The <code>userID</code> field must not contain any personally identifiable information of the user, for example, name, personal identification numbers, or other end user personal information.</p></li><li><p>If you want a user to start a conversation on one device and continue on another device, use a user-specific identifier.</p></li><li><p>If you want the same user to be able to have two independent conversations on two different devices, choose a device-specific identifier.</p></li><li><p>A user can&rsquo;t have two independent conversations with two different versions of the same bot. For example, a user can&rsquo;t have a conversation with the PROD and BETA versions of the same bot. If you anticipate that a user will need to have conversation with two different versions, for example, while testing, include the bot alias in the user ID to separate the two conversations.</p></li></ul></p>","parent_name":"AWSLexPostContentRequest"},"Classes/AWSLexIntentSummary.html#/c:objc(cs)AWSLexIntentSummary(py)checkpointLabel":{"name":"checkpointLabel","abstract":"<p>A user-defined label that identifies a particular intent. You can use this label to return to a previous intent. </p><p>Use the <code>checkpointLabelFilter</code> parameter of the <code>GetSessionRequest</code> operation to filter the intents returned by the operation to those with only the specified label.</p>","parent_name":"AWSLexIntentSummary"},"Classes/AWSLexIntentSummary.html#/c:objc(cs)AWSLexIntentSummary(py)confirmationStatus":{"name":"confirmationStatus","abstract":"<p><p>The status of the intent after the user responds to the confirmation prompt. If the user confirms the intent, Amazon Lex sets this field to <code>Confirmed</code>. If the user denies the intent, Amazon Lex sets this value to <code>Denied</code>. The possible values are:</p><ul><li><p><code>Confirmed</code> - The user has responded <q>Yes</q> to the confirmation prompt, confirming that the intent is complete and that it is ready to be fulfilled.</p></li><li><p><code>Denied</code> - The user has responded <q>No</q> to the confirmation prompt.</p></li><li><p><code>None</code> - The user has never been prompted for confirmation; or, the user was prompted but did not confirm or deny the prompt.</p></li></ul></p>","parent_name":"AWSLexIntentSummary"},"Classes/AWSLexIntentSummary.html#/c:objc(cs)AWSLexIntentSummary(py)dialogActionType":{"name":"dialogActionType","abstract":"<p><p>The next action that the bot should take in its interaction with the user. The possible values are:</p><ul><li><p><code>ConfirmIntent</code> - The next action is asking the user if the intent is complete and ready to be fulfilled. This is a yes/no question such as <q>Place the order?</q></p></li><li><p><code>Close</code> - Indicates that the there will not be a response from the user. For example, the statement <q>Your order has been placed</q> does not require a response.</p></li><li><p><code>ElicitIntent</code> - The next action is to determine the intent that the user wants to fulfill.</p></li><li><p><code>ElicitSlot</code> - The next action is to elicit a slot value from the user.</p></li></ul></p>","parent_name":"AWSLexIntentSummary"},"Classes/AWSLexIntentSummary.html#/c:objc(cs)AWSLexIntentSummary(py)fulfillmentState":{"name":"fulfillmentState","abstract":"<p><p>The fulfillment state of the intent. The possible values are:</p><ul><li><p><code>Failed</code> - The Lambda function associated with the intent failed to fulfill the intent.</p></li><li><p><code>Fulfilled</code> - The intent has fulfilled by the Lambda function associated with the intent. </p></li><li><p><code>ReadyForFulfillment</code> - All of the information necessary for the intent is present and the intent ready to be fulfilled by the client application.</p></li></ul></p>","parent_name":"AWSLexIntentSummary"},"Classes/AWSLexIntentSummary.html#/c:objc(cs)AWSLexIntentSummary(py)intentName":{"name":"intentName","abstract":"<p>The name of the intent.</p>","parent_name":"AWSLexIntentSummary"},"Classes/AWSLexIntentSummary.html#/c:objc(cs)AWSLexIntentSummary(py)slotToElicit":{"name":"slotToElicit","abstract":"<p>The next slot to elicit from the user. If there is not slot to elicit, the field is blank.</p>","parent_name":"AWSLexIntentSummary"},"Classes/AWSLexIntentSummary.html#/c:objc(cs)AWSLexIntentSummary(py)slots":{"name":"slots","abstract":"<p>Map of the slots that have been gathered and their values. </p>","parent_name":"AWSLexIntentSummary"},"Classes/AWSLexGetSessionResponse.html#/c:objc(cs)AWSLexGetSessionResponse(py)dialogAction":{"name":"dialogAction","abstract":"<p>Describes the current state of the bot.</p>","parent_name":"AWSLexGetSessionResponse"},"Classes/AWSLexGetSessionResponse.html#/c:objc(cs)AWSLexGetSessionResponse(py)recentIntentSummaryView":{"name":"recentIntentSummaryView","abstract":"<p>An array of information about the intents used in the session. The array can contain a maximum of three summaries. If more than three intents are used in the session, the <code>recentIntentSummaryView</code> operation contains information about the last three intents used.</p><p>If you set the <code>checkpointLabelFilter</code> parameter in the request, the array contains only the intents with the specified label.</p>","parent_name":"AWSLexGetSessionResponse"},"Classes/AWSLexGetSessionResponse.html#/c:objc(cs)AWSLexGetSessionResponse(py)sessionAttributes":{"name":"sessionAttributes","abstract":"<p>Map of key/value pairs representing the session-specific context information. It contains application information passed between Amazon Lex and a client application.</p>","parent_name":"AWSLexGetSessionResponse"},"Classes/AWSLexGetSessionResponse.html#/c:objc(cs)AWSLexGetSessionResponse(py)sessionId":{"name":"sessionId","abstract":"<p>A unique identifier for the session.</p>","parent_name":"AWSLexGetSessionResponse"},"Classes/AWSLexGetSessionRequest.html#/c:objc(cs)AWSLexGetSessionRequest(py)botAlias":{"name":"botAlias","abstract":"<p>The alias in use for the bot that contains the session data.</p>","parent_name":"AWSLexGetSessionRequest"},"Classes/AWSLexGetSessionRequest.html#/c:objc(cs)AWSLexGetSessionRequest(py)botName":{"name":"botName","abstract":"<p>The name of the bot that contains the session data.</p>","parent_name":"AWSLexGetSessionRequest"},"Classes/AWSLexGetSessionRequest.html#/c:objc(cs)AWSLexGetSessionRequest(py)checkpointLabelFilter":{"name":"checkpointLabelFilter","abstract":"<p>A string used to filter the intents returned in the <code>recentIntentSummaryView</code> structure. </p><p>When you specify a filter, only intents with their <code>checkpointLabel</code> field set to that string are returned.</p>","parent_name":"AWSLexGetSessionRequest"},"Classes/AWSLexGetSessionRequest.html#/c:objc(cs)AWSLexGetSessionRequest(py)userId":{"name":"userId","abstract":"<p>The ID of the client application user. Amazon Lex uses this to identify a user&rsquo;s conversation with your bot. </p>","parent_name":"AWSLexGetSessionRequest"},"Classes/AWSLexGenericAttachment.html#/c:objc(cs)AWSLexGenericAttachment(py)attachmentLinkUrl":{"name":"attachmentLinkUrl","abstract":"<p>The URL of an attachment to the response card.</p>","parent_name":"AWSLexGenericAttachment"},"Classes/AWSLexGenericAttachment.html#/c:objc(cs)AWSLexGenericAttachment(py)buttons":{"name":"buttons","abstract":"<p>The list of options to show to the user.</p>","parent_name":"AWSLexGenericAttachment"},"Classes/AWSLexGenericAttachment.html#/c:objc(cs)AWSLexGenericAttachment(py)imageUrl":{"name":"imageUrl","abstract":"<p>The URL of an image that is displayed to the user.</p>","parent_name":"AWSLexGenericAttachment"},"Classes/AWSLexGenericAttachment.html#/c:objc(cs)AWSLexGenericAttachment(py)subTitle":{"name":"subTitle","abstract":"<p>The subtitle shown below the title.</p>","parent_name":"AWSLexGenericAttachment"},"Classes/AWSLexGenericAttachment.html#/c:objc(cs)AWSLexGenericAttachment(py)title":{"name":"title","abstract":"<p>The title of the option.</p>","parent_name":"AWSLexGenericAttachment"},"Classes/AWSLexDialogAction.html#/c:objc(cs)AWSLexDialogAction(py)fulfillmentState":{"name":"fulfillmentState","abstract":"<p><p>The fulfillment state of the intent. The possible values are:</p><ul><li><p><code>Failed</code> - The Lambda function associated with the intent failed to fulfill the intent.</p></li><li><p><code>Fulfilled</code> - The intent has fulfilled by the Lambda function associated with the intent. </p></li><li><p><code>ReadyForFulfillment</code> - All of the information necessary for the intent is present and the intent ready to be fulfilled by the client application.</p></li></ul></p>","parent_name":"AWSLexDialogAction"},"Classes/AWSLexDialogAction.html#/c:objc(cs)AWSLexDialogAction(py)intentName":{"name":"intentName","abstract":"<p>The name of the intent.</p>","parent_name":"AWSLexDialogAction"},"Classes/AWSLexDialogAction.html#/c:objc(cs)AWSLexDialogAction(py)message":{"name":"message","abstract":"<p>The message that should be shown to the user. If you don&rsquo;t specify a message, Amazon Lex will use the message configured for the intent.</p>","parent_name":"AWSLexDialogAction"},"Classes/AWSLexDialogAction.html#/c:objc(cs)AWSLexDialogAction(py)messageFormat":{"name":"messageFormat","abstract":"<ul><li><p><code>PlainText</code> - The message contains plain UTF-8 text.</p></li><li><p><code>CustomPayload</code> - The message is a custom format for the client.</p></li><li><p><code>SSML</code> - The message contains text formatted for voice output.</p></li><li><p><code>Composite</code> - The message contains an escaped JSON object containing one or more messages. For more information, see <a href=\"https://docs.aws.amazon.com/lex/latest/dg/howitworks-manage-prompts.html\">Message Groups</a>. </p></li></ul>","parent_name":"AWSLexDialogAction"},"Classes/AWSLexDialogAction.html#/c:objc(cs)AWSLexDialogAction(py)slotToElicit":{"name":"slotToElicit","abstract":"<p>The name of the slot that should be elicited from the user.</p>","parent_name":"AWSLexDialogAction"},"Classes/AWSLexDialogAction.html#/c:objc(cs)AWSLexDialogAction(py)slots":{"name":"slots","abstract":"<p>Map of the slots that have been gathered and their values. </p>","parent_name":"AWSLexDialogAction"},"Classes/AWSLexDialogAction.html#/c:objc(cs)AWSLexDialogAction(py)types":{"name":"types","abstract":"<p><p>The next action that the bot should take in its interaction with the user. The possible values are:</p><ul><li><p><code>ConfirmIntent</code> - The next action is asking the user if the intent is complete and ready to be fulfilled. This is a yes/no question such as <q>Place the order?</q></p></li><li><p><code>Close</code> - Indicates that the there will not be a response from the user. For example, the statement <q>Your order has been placed</q> does not require a response.</p></li><li><p><code>Delegate</code> - The next action is determined by Amazon Lex.</p></li><li><p><code>ElicitIntent</code> - The next action is to determine the intent that the user wants to fulfill.</p></li><li><p><code>ElicitSlot</code> - The next action is to elicit a slot value from the user.</p></li></ul></p>","parent_name":"AWSLexDialogAction"},"Classes/AWSLexDeleteSessionResponse.html#/c:objc(cs)AWSLexDeleteSessionResponse(py)botAlias":{"name":"botAlias","abstract":"<p>The alias in use for the bot associated with the session data.</p>","parent_name":"AWSLexDeleteSessionResponse"},"Classes/AWSLexDeleteSessionResponse.html#/c:objc(cs)AWSLexDeleteSessionResponse(py)botName":{"name":"botName","abstract":"<p>The name of the bot associated with the session data.</p>","parent_name":"AWSLexDeleteSessionResponse"},"Classes/AWSLexDeleteSessionResponse.html#/c:objc(cs)AWSLexDeleteSessionResponse(py)sessionId":{"name":"sessionId","abstract":"<p>The unique identifier for the session.</p>","parent_name":"AWSLexDeleteSessionResponse"},"Classes/AWSLexDeleteSessionResponse.html#/c:objc(cs)AWSLexDeleteSessionResponse(py)userId":{"name":"userId","abstract":"<p>The ID of the client application user.</p>","parent_name":"AWSLexDeleteSessionResponse"},"Classes/AWSLexDeleteSessionRequest.html#/c:objc(cs)AWSLexDeleteSessionRequest(py)botAlias":{"name":"botAlias","abstract":"<p>The alias in use for the bot that contains the session data.</p>","parent_name":"AWSLexDeleteSessionRequest"},"Classes/AWSLexDeleteSessionRequest.html#/c:objc(cs)AWSLexDeleteSessionRequest(py)botName":{"name":"botName","abstract":"<p>The name of the bot that contains the session data.</p>","parent_name":"AWSLexDeleteSessionRequest"},"Classes/AWSLexDeleteSessionRequest.html#/c:objc(cs)AWSLexDeleteSessionRequest(py)userId":{"name":"userId","abstract":"<p>The identifier of the user associated with the session data.</p>","parent_name":"AWSLexDeleteSessionRequest"},"Classes/AWSLexButton.html#/c:objc(cs)AWSLexButton(py)text":{"name":"text","abstract":"<p>Text that is visible to the user on the button.</p>","parent_name":"AWSLexButton"},"Classes/AWSLexButton.html#/c:objc(cs)AWSLexButton(py)value":{"name":"value","abstract":"<p>The value sent to Amazon Lex when a user chooses the button. For example, consider button text &ldquo;NYC.&rdquo; When the user chooses the button, the value sent can be &ldquo;New York City.&rdquo;</p>","parent_name":"AWSLexButton"},"Classes/AWSLexAudioPlayer.html#/c:objc(cs)AWSLexAudioPlayer(py)errorBlock":{"name":"errorBlock","abstract":"<p>Set it to handle error.</p>","parent_name":"AWSLexAudioPlayer"},"Classes/AWSLexAudioPlayer.html#/c:objc(cs)AWSLexAudioPlayer(py)completionBlock":{"name":"completionBlock","abstract":"<p>Set it to handle successful audio play.</p>","parent_name":"AWSLexAudioPlayer"},"Classes/AWSLexAudioPlayer.html#/c:objc(cs)AWSLexAudioPlayer(py)preparedBlock":{"name":"preparedBlock","abstract":"<p>Set it to handle when audio has been prepared to play.</p>","parent_name":"AWSLexAudioPlayer"},"Classes/AWSLexAudioPlayer.html#/c:objc(cs)AWSLexAudioPlayer(im)initWithData:":{"name":"-initWithData:","abstract":"<p>Undocumented</p>","parent_name":"AWSLexAudioPlayer"},"Classes/AWSLexAudioPlayer.html#/c:objc(cs)AWSLexAudioPlayer(im)start":{"name":"-start","abstract":"<p>Start playing sound.</p>","parent_name":"AWSLexAudioPlayer"},"Classes/AWSLexAudioSession.html#/c:objc(cs)AWSLexAudioSession(cm)sharedInstance":{"name":"+sharedInstance","abstract":"<p>Undocumented</p>","parent_name":"AWSLexAudioSession"},"Classes/AWSLexAudioSession.html#/c:objc(cs)AWSLexAudioSession(im)setPlayAndRecordCategory:":{"name":"-setPlayAndRecordCategory:","abstract":"<p>Set AVAudioSession category to AVAudioSessionCategoryPlayAndRecord</p>","parent_name":"AWSLexAudioSession"},"Classes/AWSLexAudioSession.html#/c:objc(cs)AWSLexAudioSession(im)overrideOutputAudioPort:":{"name":"-overrideOutputAudioPort:","abstract":"<p>Override output audio port to AVAudioSessionPortOverrideSpeaker if headset is not detected.</p>","parent_name":"AWSLexAudioSession"},"Classes/AWSLexAudioSession.html#/c:objc(cs)AWSLexAudioSession(im)requestRecordPermission:":{"name":"-requestRecordPermission:","abstract":"<p>Request record permission to AVAudioSession.</p>","parent_name":"AWSLexAudioSession"},"Classes/AWSLexAudioSession.html#/c:objc(cs)AWSLexAudioSession(im)startObservingAudioSessionRouteChangeNotification":{"name":"-startObservingAudioSessionRouteChangeNotification","abstract":"<p>Start observing for AVAudioSessionRouteChangeNotification if not already started.</p>","parent_name":"AWSLexAudioSession"},"Classes/AWSLexAudioSession.html#/c:objc(cs)AWSLexAudioSession(im)endObservingAudioSessionRouteChangeNotification":{"name":"-endObservingAudioSessionRouteChangeNotification","abstract":"<p>Remove observing for AVAudioSessionRouteChangeNotification.</p>","parent_name":"AWSLexAudioSession"},"Classes/AWSLexSwitchModeResponse.html#/c:objc(cs)AWSLexSwitchModeResponse(py)interactionMode":{"name":"interactionMode","abstract":"<p>Undocumented</p>","parent_name":"AWSLexSwitchModeResponse"},"Classes/AWSLexSwitchModeResponse.html#/c:objc(cs)AWSLexSwitchModeResponse(py)sessionAttributes":{"name":"sessionAttributes","abstract":"<p>Undocumented</p>","parent_name":"AWSLexSwitchModeResponse"},"Classes/AWSLexSwitchModeInput.html#/c:objc(cs)AWSLexSwitchModeInput(py)intent":{"name":"intent","abstract":"<p>Name of the intent being ellicited.</p>","parent_name":"AWSLexSwitchModeInput"},"Classes/AWSLexSwitchModeInput.html#/c:objc(cs)AWSLexSwitchModeInput(py)outputText":{"name":"outputText","abstract":"<p>Text response.</p>","parent_name":"AWSLexSwitchModeInput"},"Classes/AWSLexSwitchModeInput.html#/c:objc(cs)AWSLexSwitchModeInput(py)slots":{"name":"slots","abstract":"<p>The slots which are currently filled in an ongoing dialog</p>","parent_name":"AWSLexSwitchModeInput"},"Classes/AWSLexSwitchModeInput.html#/c:objc(cs)AWSLexSwitchModeInput(py)elicitSlot":{"name":"elicitSlot","abstract":"<p>The slot which is being ellicited for an intent.</p>","parent_name":"AWSLexSwitchModeInput"},"Classes/AWSLexSwitchModeInput.html#/c:objc(cs)AWSLexSwitchModeInput(py)dialogState":{"name":"dialogState","abstract":"<p>The current dialog state.</p>","parent_name":"AWSLexSwitchModeInput"},"Classes/AWSLexSwitchModeInput.html#/c:objc(cs)AWSLexSwitchModeInput(py)sessionAttributes":{"name":"sessionAttributes","abstract":"<p>The session attributes returned from the service.</p>","parent_name":"AWSLexSwitchModeInput"},"Classes/AWSLexSwitchModeInput.html#/c:objc(cs)AWSLexSwitchModeInput(py)audioStream":{"name":"audioStream","abstract":"<p>The audio stream . This may be null incase of a text response.</p>","parent_name":"AWSLexSwitchModeInput"},"Classes/AWSLexSwitchModeInput.html#/c:objc(cs)AWSLexSwitchModeInput(py)audioContentType":{"name":"audioContentType","abstract":"<p>The format for the audio stream. This may be null if the audion stream is null.</p>","parent_name":"AWSLexSwitchModeInput"},"Classes/AWSLexSwitchModeInput.html#/c:objc(cs)AWSLexSwitchModeInput(py)inputTranscript":{"name":"inputTranscript","abstract":"<p>Transcript of the voice input to the operation.</p>","parent_name":"AWSLexSwitchModeInput"},"Classes/AWSLexInteractionKit.html#/c:objc(cs)AWSLexInteractionKit(py)interactionKitConfig":{"name":"interactionKitConfig","abstract":"<p>Undocumented</p>","parent_name":"AWSLexInteractionKit"},"Classes/AWSLexInteractionKit.html#/c:objc(cs)AWSLexInteractionKit(py)interactionDelegate":{"name":"interactionDelegate","abstract":"<p>Undocumented</p>","parent_name":"AWSLexInteractionKit"},"Classes/AWSLexInteractionKit.html#/c:objc(cs)AWSLexInteractionKit(py)microphoneDelegate":{"name":"microphoneDelegate","abstract":"<p>Undocumented</p>","parent_name":"AWSLexInteractionKit"},"Classes/AWSLexInteractionKit.html#/c:objc(cs)AWSLexInteractionKit(py)audioPlayerDelegate":{"name":"audioPlayerDelegate","abstract":"<p>Undocumented</p>","parent_name":"AWSLexInteractionKit"},"Classes/AWSLexInteractionKit.html#/c:objc(cs)AWSLexInteractionKit(cm)defaultInteractionKit":{"name":"+defaultInteractionKit","abstract":"<p>Returns the singleton interactionKit client. If the singleton object does not exist, the SDK instantiates the default service client with <code>defaultServiceConfiguration</code> from <code>[AWSServiceManager defaultServiceManager]</code>. The reference to this object is maintained by the SDK, and you do not need to retain it manually.</p>","parent_name":"AWSLexInteractionKit"},"Classes/AWSLexInteractionKit.html#/c:objc(cs)AWSLexInteractionKit(cm)registerInteractionKitWithServiceConfiguration:interactionKitConfiguration:forKey:":{"name":"+registerInteractionKitWithServiceConfiguration:interactionKitConfiguration:forKey:","abstract":"<p>Creates a InteractionKit client with the given service configuration and registers it for the key.</p>","parent_name":"AWSLexInteractionKit"},"Classes/AWSLexInteractionKit.html#/c:objc(cs)AWSLexInteractionKit(cm)interactionKitForKey:":{"name":"+interactionKitForKey:","abstract":"<p>Retrieves the service client associated with the key. You need to call <code>+ registerLexWithConfiguration:forKey:</code> before invoking this method.</p>","parent_name":"AWSLexInteractionKit"},"Classes/AWSLexInteractionKit.html#/c:objc(cs)AWSLexInteractionKit(cm)removeInteractionKitForKey:":{"name":"+removeInteractionKitForKey:","abstract":"<p>Removes the interaction kit associated with the key and release it.</p>","parent_name":"AWSLexInteractionKit"},"Classes/AWSLexInteractionKit.html#/c:objc(cs)AWSLexInteractionKit(im)textInTextOut:":{"name":"-textInTextOut:","abstract":"<p>Accepts a text input and responds back with a text output</p>","parent_name":"AWSLexInteractionKit"},"Classes/AWSLexInteractionKit.html#/c:objc(cs)AWSLexInteractionKit(im)textInTextOut:sessionAttributes:":{"name":"-textInTextOut:sessionAttributes:","abstract":"<p>Accets a text input and an optional sessionAttribute dictionary and responds back with a text output.</p>","parent_name":"AWSLexInteractionKit"},"Classes/AWSLexInteractionKit.html#/c:objc(cs)AWSLexInteractionKit(im)textInAudioOut:":{"name":"-textInAudioOut:","abstract":"<p>Accepts a text input and responds back with an audio response. the playback will begin automatically unless you have set autoplayback to false in the InteractionKitConfig.</p>","parent_name":"AWSLexInteractionKit"},"Classes/AWSLexInteractionKit.html#/c:objc(cs)AWSLexInteractionKit(im)textInAudioOut:sessionAttributes:":{"name":"-textInAudioOut:sessionAttributes:","abstract":"<p>Accepts a text input and an optional sessionAttribute dictionary and responds back with an audio response. The playback will begin automatically unless you have set autoplayback to false in the InteractionKitConfig.</p>","parent_name":"AWSLexInteractionKit"},"Classes/AWSLexInteractionKit.html#/c:objc(cs)AWSLexInteractionKit(im)audioInAudioOut":{"name":"-audioInAudioOut","abstract":"<p>Starts the microphone and listens to audio from the phone microphone and responds back with an audio response.The playback will begin automatically unless you have set autoplayback to false in the InteractionKitConfig.</p>","parent_name":"AWSLexInteractionKit"},"Classes/AWSLexInteractionKit.html#/c:objc(cs)AWSLexInteractionKit(im)audioInAudioOutWithSessionAttributes:":{"name":"-audioInAudioOutWithSessionAttributes:","abstract":"<p>Starts the microphone and listens to audio from the phone microphone and responds back with an audio response.The playback will begin automatically unless you have set autoplayback to false in the InteractionKitConfig.</p>","parent_name":"AWSLexInteractionKit"},"Classes/AWSLexInteractionKit.html#/c:objc(cs)AWSLexInteractionKit(im)audioInTextOut":{"name":"-audioInTextOut","abstract":"<p>Starts the microphone and listens to audio from the phone microphone and responds back with a text response.</p>","parent_name":"AWSLexInteractionKit"},"Classes/AWSLexInteractionKit.html#/c:objc(cs)AWSLexInteractionKit(im)audioInTextOutWithSessionAttributes:":{"name":"-audioInTextOutWithSessionAttributes:","abstract":"<p>Starts the microphone and listens to audio from the phone microphone and responds back with a text response.</p>","parent_name":"AWSLexInteractionKit"},"Classes/AWSLexInteractionKit.html#/c:objc(cs)AWSLexInteractionKit(im)cancel":{"name":"-cancel","abstract":"<p>Cancels ongoing http call and stops listening to Microphone if Audio input was requested.</p>","parent_name":"AWSLexInteractionKit"},"Classes/AWSLexInteractionKitConfig.html#/c:objc(cs)AWSLexInteractionKitConfig(py)botName":{"name":"botName","abstract":"<p>Undocumented</p>","parent_name":"AWSLexInteractionKitConfig"},"Classes/AWSLexInteractionKitConfig.html#/c:objc(cs)AWSLexInteractionKitConfig(py)botAlias":{"name":"botAlias","abstract":"<p>Undocumented</p>","parent_name":"AWSLexInteractionKitConfig"},"Classes/AWSLexInteractionKitConfig.html#/c:objc(cs)AWSLexInteractionKitConfig(py)userId":{"name":"userId","abstract":"<p>Undocumented</p>","parent_name":"AWSLexInteractionKitConfig"},"Classes/AWSLexInteractionKitConfig.html#/c:objc(cs)AWSLexInteractionKitConfig(py)globalSessionAttributes":{"name":"globalSessionAttributes","abstract":"<p>Undocumented</p>","parent_name":"AWSLexInteractionKitConfig"},"Classes/AWSLexInteractionKitConfig.html#/c:objc(cs)AWSLexInteractionKitConfig(py)noSpeechTimeoutInterval":{"name":"noSpeechTimeoutInterval","abstract":"<p>Undocumented</p>","parent_name":"AWSLexInteractionKitConfig"},"Classes/AWSLexInteractionKitConfig.html#/c:objc(cs)AWSLexInteractionKitConfig(py)maxSpeechTimeoutInterval":{"name":"maxSpeechTimeoutInterval","abstract":"<p>Undocumented</p>","parent_name":"AWSLexInteractionKitConfig"},"Classes/AWSLexInteractionKitConfig.html#/c:objc(cs)AWSLexInteractionKitConfig(py)startpointingThreshold":{"name":"startpointingThreshold","abstract":"<p>Undocumented</p>","parent_name":"AWSLexInteractionKitConfig"},"Classes/AWSLexInteractionKitConfig.html#/c:objc(cs)AWSLexInteractionKitConfig(py)endpointingThreshold":{"name":"endpointingThreshold","abstract":"<p>Undocumented</p>","parent_name":"AWSLexInteractionKitConfig"},"Classes/AWSLexInteractionKitConfig.html#/c:objc(cs)AWSLexInteractionKitConfig(py)lrtThreshold":{"name":"lrtThreshold","abstract":"<p>Undocumented</p>","parent_name":"AWSLexInteractionKitConfig"},"Classes/AWSLexInteractionKitConfig.html#/c:objc(cs)AWSLexInteractionKitConfig(py)autoPlayback":{"name":"autoPlayback","abstract":"<p>Undocumented</p>","parent_name":"AWSLexInteractionKitConfig"},"Classes/AWSLexInteractionKitConfig.html#/c:objc(cs)AWSLexInteractionKitConfig(py)encoding":{"name":"encoding","abstract":"<p>Undocumented</p>","parent_name":"AWSLexInteractionKitConfig"},"Classes/AWSLexInteractionKitConfig.html#/c:objc(cs)AWSLexInteractionKitConfig(im)setGlobalSessionAttribute:forKey:":{"name":"-setGlobalSessionAttribute:forKey:","abstract":"<p>Undocumented</p>","parent_name":"AWSLexInteractionKitConfig"},"Classes/AWSLexInteractionKitConfig.html#/c:objc(cs)AWSLexInteractionKitConfig(im)removeGlobalSessionAttribute:":{"name":"-removeGlobalSessionAttribute:","abstract":"<p>Undocumented</p>","parent_name":"AWSLexInteractionKitConfig"},"Classes/AWSLexInteractionKitConfig.html#/c:objc(cs)AWSLexInteractionKitConfig(im)clearAllGlobalSessionAttributes":{"name":"-clearAllGlobalSessionAttributes","abstract":"<p>Undocumented</p>","parent_name":"AWSLexInteractionKitConfig"},"Classes/AWSLexInteractionKitConfig.html#/c:objc(cs)AWSLexInteractionKitConfig(cm)defaultInteractionKitConfigWithBotName:botAlias:":{"name":"+defaultInteractionKitConfigWithBotName:botAlias:","abstract":"<p>Undocumented</p>","parent_name":"AWSLexInteractionKitConfig"},"Classes/AWSLexInteractionKitConfig.html":{"name":"AWSLexInteractionKitConfig","abstract":"<p>Undocumented</p>"},"Classes/AWSLexInteractionKit.html":{"name":"AWSLexInteractionKit","abstract":"<p>Undocumented</p>"},"Classes/AWSLexSwitchModeInput.html":{"name":"AWSLexSwitchModeInput","abstract":"<p>Undocumented</p>"},"Classes/AWSLexSwitchModeResponse.html":{"name":"AWSLexSwitchModeResponse","abstract":"<p>A response class returned back to the InteractionKit, In the course that user decides to switch modes of input between 2 requests, or set additional session attributes in the subsequant request.</p>"},"Classes/AWSLexAudioSession.html":{"name":"AWSLexAudioSession","abstract":"<p>Wrapper to AVAudioSession class."},"Classes/AWSLexAudioPlayer.html":{"name":"AWSLexAudioPlayer","abstract":"<p>Wrapper to AVAudioPLayer class.</p>"},"Classes/AWSLexButton.html":{"name":"AWSLexButton","abstract":"<p>Represents an option to be shown on the client platform (Facebook, Slack, etc.)</p>"},"Classes/AWSLexDeleteSessionRequest.html":{"name":"AWSLexDeleteSessionRequest"},"Classes/AWSLexDeleteSessionResponse.html":{"name":"AWSLexDeleteSessionResponse"},"Classes/AWSLexDialogAction.html":{"name":"AWSLexDialogAction","abstract":"<p>Describes the next action that the bot should take in its interaction with the user and provides information about the context in which the action takes place. Use the <code>DialogAction</code> data type to set the interaction to a specific state, or to return the interaction to a previous state.</p>"},"Classes/AWSLexGenericAttachment.html":{"name":"AWSLexGenericAttachment","abstract":"<p>Represents an option rendered to the user when a prompt is shown. It could be an image, a button, a link, or text. </p>"},"Classes/AWSLexGetSessionRequest.html":{"name":"AWSLexGetSessionRequest"},"Classes/AWSLexGetSessionResponse.html":{"name":"AWSLexGetSessionResponse"},"Classes/AWSLexIntentSummary.html":{"name":"AWSLexIntentSummary","abstract":"<p>Provides information about the state of an intent. You can use this information to get the current state of an intent so that you can process the intent, or so that you can return the intent to its previous state.</p>"},"Classes/AWSLexPostContentRequest.html":{"name":"AWSLexPostContentRequest"},"Classes/AWSLexPostContentResponse.html":{"name":"AWSLexPostContentResponse"},"Classes/AWSLexPostTextRequest.html":{"name":"AWSLexPostTextRequest"},"Classes/AWSLexPostTextResponse.html":{"name":"AWSLexPostTextResponse"},"Classes/AWSLexPutSessionRequest.html":{"name":"AWSLexPutSessionRequest"},"Classes/AWSLexPutSessionResponse.html":{"name":"AWSLexPutSessionResponse"},"Classes/AWSLexResponseCard.html":{"name":"AWSLexResponseCard","abstract":"<p>If you configure a response card when creating your bots, Amazon Lex substitutes the session attributes and slot values that are available, and then returns it. The response card can also come from a Lambda function ( <code>dialogCodeHook</code> and <code>fulfillmentActivity</code> on an intent).</p>"},"Classes/AWSLexSentimentResponse.html":{"name":"AWSLexSentimentResponse","abstract":"<p>The sentiment expressed in an utterance.</p><p>When the bot is configured to send utterances to Amazon Comprehend for sentiment analysis, this field structure contains the result of the analysis.</p>"},"Classes/AWSLexResources.html":{"name":"AWSLexResources","abstract":"<p>Undocumented</p>"},"Classes/AWSLex.html":{"name":"AWSLex","abstract":"<p>Amazon Lex provides both build and runtime endpoints. Each endpoint provides a set of operations (API). Your conversational bot uses the runtime API to understand user utterances (user input text or voice). For example, suppose a user says &ldquo;I want pizza&rdquo;, your bot sends this input to Amazon Lex using the runtime API. Amazon Lex recognizes that the user request is for the OrderPizza intent (one of the intents defined in the bot). Then Amazon Lex engages in user conversation on behalf of the bot to elicit required information (slot values, such as pizza size and crust type), and then performs fulfillment activity (that you configured when you created the bot). You use the build-time API to create and manage your Amazon Lex bot. For a list of build-time operations, see the build-time API, . </p>"},"Classes/AWSLexVoiceButtonResponse.html":{"name":"AWSLexVoiceButtonResponse","abstract":"<p>Undocumented</p>"},"Classes/AWSLexVoiceButton.html":{"name":"AWSLexVoiceButton","abstract":"<p>Undocumented</p>"},"Classes.html":{"name":"Classes","abstract":"<p>The following classes are available globally.</p>"},"Constants.html":{"name":"Constants","abstract":"<p>The following constants are available globally.</p>"},"Enums.html":{"name":"Enumerations","abstract":"<p>The following enumerations are available globally.</p>"},"Protocols.html":{"name":"Protocols","abstract":"<p>The following protocols are available globally.</p>"}}